      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     +  RPL,DDSDDT,DRPLDE,DRPLDT,
     +  STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     +  NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     +  CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,KSTEP,KINC)
C
C     RATE DEPENDENT CRYSTAL PLASTICITY MODEL
C     UPDATED September 2018
C
      INCLUDE 'ABA_PARAM.INC'
C
      CHARACTER*80 CMNAME
C
      DIMENSION STRESS(NTENS),STATEV(NSTATV),
     +  DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     +  STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     +  PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3)
C
      PARAMETER(NSP=24,KTENS=6)
C***  KTENS SHOULD BE SET EQUAL TO NTENS
C***  i.e., KTENS=6 IN 3-D, KTENS=4 IN PLANE STRAIN OR AXISUMMETRIC PROBLEMS
C
C     LOGICAL VARLOG
C
      DIMENSION DXDX(3,3)
      DIMENSION A1(3),A2(3),A3(3),P(3)
      DIMENSION DROTT(3,3),QLR(3,3)
      DIMENSION CMX(3,3,3,3),ALET(3,3,3,3)
      DIMENSION SD0(3,NSP),SN0(3,NSP),SDH(3,NSP),SNH(3,NSP),
     + GAMMA(NSP),NAS(NSP),IYIELD(NSP),SD(3,NSP),SN(3,NSP),
     + GAMMAT(NSP),JYIELD(NSP),FAB(NSP,NSP),NAST(NSP),IYIELDT(NSP)
      DIMENSION UNIT2(3,3),UNIT3(NSP,NSP) 
      DIMENSION FE(3,3),FET(3,3),CE(3,3),EE(3,3),FE0(3,3),
     + FP(3,3),FP0(3,3),FPINV(3,3),F0(3,3),FEINV(3,3)
      DIMENSION CAUCHY(3,3),SE(3,3),TAU(3,3),SIGMA(3,3),SIGMAEL(3,3)
      DIMENSION FESTAR(3,3),DE(3,3),DELOG(3,3),TA(NSP),TAT(NSP),
     + TAUCR(NSP),TAUCRT(NSP)
      DIMENSION AM(3,3,NSP),AW(3,3),Q(3,3),XI(3,3,NSP),
     + HAB(NSP,NSP),HABT(NSP,NSP),A(NSP,NSP),PSI(3,3,NSP),AT(3,3,NSP), 
     + DGAMMA(NSP),FCN(NSP),FCNT(NSP),DFCNTA(NSP), 
     + DFCNTAUCR(NSP),FAMB(NSP,NSP),AMAB(NSP,NSP),ANAB(NSP,NSP) 
      DIMENSION SCR1(3,3),SCR2(3,3),SCR3(3,3),SCR4(KTENS,KTENS)
      DIMENSION DFE(3,3),DCE(3,3),DEE(3,3),DSE(3,3),DSIGMA(3,3),
     + DHAB(NSP,NSP,NSP),DTAUCR(NSP,NSP),DF(NSP,NSP)
      DIMENSION FHAT(NSP),DGHAT(NSP),EDGAMMA(NSP)
      DIMENSION AL(3,3),V1(3),V2(3)
      DIMENSION BETA(3,3),PHI(3,3,NSP),ALJ(3,3,3,3)
      DIMENSION DIFF(KTENS,KTENS),DDSDDET(KTENS,KTENS)
      DIMENSION DTDT(3,3),ARA(NSP),AFA(NSP),ARADEMAG(NSP) 
      DIMENSION QAB(NSP,NSP) 
      DIMENSION DELOGMISES3X3PL(3,3),DELOGMISESPL(KTENS)   
C
C
C
C
C*** STATE VARIABLES
C
C     STATEV( 1 -- 9)                = FE ( COMPONENTS OF F(ELASTIC) )
C     STATEV(10 -- 18)                = FP ( COMPONENTS OF F(PLASTIC) )
C     STATEV(19 -- 18+NSP)            = GAMMA-ALPHA  (19--42)  GAMMA(ISP)
C     STATEV(18+NSP+1   -- 18+2*NSP)  = TAUCR-ALPHA  (43--66)  TAUCR(ISP)
C     STATEV(18+2*NSP+1 -- 18+3*NSP)  = TA-ALPHA    (67--90)  TA(ISP)   
C     STATEV(18+3*NSP+1)              = GAMMABAR (91)
C     STATEV(18+3*NSP+2)              = DELOGMISESMAGPL (92)
C
C     NSTATV=20+3*NSP
C
C***  FOR SINGLE SLIP:  SET NSP =1  !
C                       MODIFY ROUTINE KBCC
C                       SET FAB=0 IN ROUTINE KGETFAB
C
C      
C***  SET IHARDTYPE=1 TO IMPOSE NON-SYMMETRIC LATENT HARDENIING Hab
C     OF THE FORM H(a,b)=Q*H(a,a) FOR a.NE.b
C
C     SET IHARDTYPE=2 TO IMPOSE SYMMETRIC LATENT HARDENING Hab 
C     OF THE FORM H(a,b)=Q*(H(a,a)+H(b,b)) FOR a.NE.b
      ISING=0
      IHARDTYPE=01
C
C***  SET IHARDMODEL=1 TO IMPOSE THAT BASSANI AND WU HARDENING MODEL IS USED FOR Hab
C***  SET IHARDMODEL=2 TO IMPOSE THAT THE SECOND HARDENING MODEL (BROWN ET AL) IS USED FOR Hab
C***  THE TYPE OF HARDENING MODEL IS NOW DEFINED THROUGH THE INPUT FILE      
C     IHARDMODEL=02
C
C***  SET IWR=01 IN ORDER TO PRINT UMAT CALCULATIONS TO THE DESIRED EXTERNAL FILE
      IWR=0
C
C***  SET IOUT EQUAL TO THE LABEL OF THE FILE IN WHICH OUTPUT WILL BE PRINTED IF REQUESTED
C     LABEL 7 CORRESPONDS TO THE MSG FILE      
      IOUT=7
C      
C      IF (KINC.GE.79.AND.KINC.LE.630.AND.NOEL.EQ.1.AND.NPT.EQ.1) IWR=1
C      IF (NOEL.EQ.1.AND.NPT.EQ.1) IWR=1
C
      IF (KTENS.NE.NTENS) THEN
        WRITE(IOUT,*) 'KTENS NOT EQUAL TO NTENS. PROGRAM STOPS.'
        CALL XIT
      END IF
      IF (NSTATV.NE.(20+3*NSP)) THEN
        WRITE(IOUT,*) 'NSTATV NOT EQUAL TO 20+3*NSP. PROGRAM STOPS.'
        CALL XIT
      END IF
C
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' KINC'
        WRITE(IOUT,1002) KINC
        WRITE(IOUT,*) ' TIME, DTIME'
        WRITE(IOUT,1001) TIME(2),DTIME
        WRITE(IOUT,*) ' NDI, NSHR, NTENS, KTENS, NSTATV'
        WRITE(IOUT,1002) NDI, NSHR, NTENS, KTENS, NSTATV
        WRITE(IOUT,*) ' NOEL, NPT'
        WRITE(IOUT,1002) NOEL, NPT
        WRITE(IOUT,*)  ' COORDS'
        IF (NTENS.EQ.6) THEN 
          WRITE(IOUT,1001) (COORDS(I),I=1,3)
        ELSE 
          WRITE(IOUT,1001) (COORDS(I),I=1,2)
        END IF
      END IF
C
C*** CALCULATE THE STRAIN MAGNITUDE FROM INCREMENT IN STRAIN COMPONENTS
C
      DEMAG=0.D0
      DO I=1,NDI
        DEMAG=DEMAG+DSTRAN(I)*DSTRAN(I)
      END DO
      DO I=1,NSHR
        DEMAG=DEMAG+0.5D0*DSTRAN(NDI+I)*DSTRAN(NDI+I)
      END DO
      DEMAG=DSQRT(2.D0*DEMAG/3.D0)
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' DSTRAN'
        WRITE(IOUT,1001) (DSTRAN(I),I=1,NTENS)
        WRITE(IOUT,*) ' DEMAG'
        WRITE(IOUT,1001) DEMAG
      END IF
C
C***  DEFINITION OF THE 2ND ORDER IDENTITY TENSOR
C     
      UNIT2 = 0.D0 ! UNIT2(I,J)=0.D0
      DO I=1,3
        UNIT2(I,I)=1.D0		       
      END DO
C
C***  READ MATERIAL PROPERTIES
C
      C11=PROPS(1)    ! ELASTIC CONSTANT 1-1
      C12=PROPS(2)    ! ELASTIC CONSTANT 1-2
      C44=PROPS(3)    ! ELASTIC CONSTANT 4-4
      T0=PROPS(4)     ! YIELD SHEAR STRESS CORRESPONDING TO ZERO PLASTIC STRAIN
      TI=PROPS(5)     ! YIELD SHEAR STRESS AT THE ONSET OF 2ND STAGE HARDENING
      H0=PROPS(6)     ! INITIAL HARDENING MODULUS
      HS=PROPS(7)     ! STEADY STATE HARDENING MODULUS FOR LARGE STRAINS
      G0=PROPS(8)     ! SHEAR STRAIN TO CAUSE FIRST YIELD
      QQ=PROPS(9)     ! Q: RATIO OF PRIMARY HARDENING/LATENT HARDENING ( USUALLY <0.5 )
      DO I=1,3        ! VECTORS TO DEFINE THE CRYSTAL ORIENTATION IN TERMS OF THE GLOBAL SYSTEM   
        A1(I)=PROPS(9+I)   
        A2(I)=PROPS(12+I)
      END DO   
      IHARDMODEL=PROPS(16)! BINARY VARIABLE; EQUALS TO 1 FOR BASSANNI AND WU HARDENING LAW AND 2 FOR BROWN'S HARDENING LAW
      ATHETA=PROPS(17) !THETA CORRESPONDING TO THE TYPE OF INTEGRATION SCHEME APPLIED IN MODEL'S CALCULATIONS      
      QAS=PROPS(18)   ! Q: RATIO OF THE LATENT HARDENING RATE TO THE SELF HARDENING RATE OF THE SECOND HARDENING MODEL 
      AA  = PROPS(19)  
      TCS = PROPS(20) ! AA TCS H00 ARE SLIP HARDENING PARAMETERS OF THE SECOND HARDENING MODEL   
      H00 = PROPS(21)         
      AMM=PROPS(22)   ! RATE SENSITIVITY FACTOR
      G0A=PROPS(23)   ! REFERENCE STATE OF SHEARING      
C            
C
C*** CODE FOR UNIAXIAL TENSION
C
      CALL KUNIAXIAL(A1,A2,A3,QLR)
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' C11, C12, C44, T0, TI, H0, HS, G0, QQ, AMM, G0A'
        WRITE(IOUT,1009) C11,C12,C44,T0,TI,H0,HS,G0,QQ,AMM,G0A
        WRITE(IOUT,*) ' IHARDMODEL,ATHETA' 
        WRITE(IOUT,1002) IHARDMODEL,ATHETA                   
        WRITE(IOUT,*) ' QAS, AA, TCS, H00' 
        WRITE(IOUT,1009) QAS,AA, TCS, H00                      
        WRITE(IOUT,*) ' VECTORS A1, A2, A3'
        WRITE(IOUT,1001) (A1(I),I=1,3)
        WRITE(IOUT,1001) (A2(I),I=1,3)
        WRITE(IOUT,1001) (A3(I),I=1,3)
        WRITE (IOUT,*)
      END IF
C
C*** SET UP ELASTIC MODULI IN ISOCLINIC CONFIGURATION
C
      CALL KCELAST(C11,C12,C44,A1,A2,A3,CMX)      
      CALL KCOPY42(CMX,SCR4,NTENS)
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' CMX'
        DO I=1,NTENS
          WRITE(IOUT,1006) (SCR4(I,J),J=1,NTENS)
        ENDDO
      END IF
C
C*** DEFINE SLIP VECTORS IN ISOCLINIC CONFIGURATION
C
C     KBCC PREPARES THE SLIP AND NORMAL VECTORS FOR ALL SLIP SYSTEMS OF BCC CRYSTALS 	
      CALL KBCC(A1,A2,A3,SD0,SN0,SDH,SNH,NSP)
C      
C	KGETFAB SAVES THE FAB HARDENING COEFFICIENTS; THE VALUES ARE TAKEN FROM BASSANI AND WU	
      CALL KGETFAB(FAB,NSP)
C      
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' FAB'
        DO I=1,NSP
          WRITE(IOUT,1012) (FAB(I,J),J=1,NSP)
        ENDDO
      END IF
C
C	KGETQAB SAVES THE QAB COMPONENTS OF A MATRIX
C     WHICH DESCRIBES THE LATENT HARDENING BEHAVIOUR OF THE CRYTAL
      CALL KGETQAB(QAB,NSP,QAS)      
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' QAB'
        DO I=1,NSP
          WRITE(IOUT,1012) (QAB(I,J),J=1,NSP)
        ENDDO
      END IF
C
C*** DEFINE YIELD TOLERANCE
C
      RESTOL=1.D-4      
      YIELDTOL=T0*1.D-4
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' RESTOL'
        WRITE(IOUT,1001) RESTOL          
        WRITE(IOUT,*) ' YIELDTOL'
        WRITE(IOUT,1001) YIELDTOL
      END IF
C       
C*** INITIALIZE STATE VARIABLES IF TOTAL ANALYSIS TIME = 0
C      
      IF (TIME(2).EQ.0.D0) THEN 
        CALL KCOPY(UNIT2,STATEV(1),3*3)        
        CALL KCOPY(UNIT2,STATEV(10),3*3)     
        STATEV(19:(18+NSP))=0.D0
        STATEV((19+NSP):(18+2*NSP))=T0        
        STATEV((19+2*NSP):(19+3*NSP+1))=0.D0        
      END IF
C
C  
C*** READ IN STATE VARIABLES
C
      CALL KCOPY(STATEV(1) ,FE,3*3)      ! F ELASTIC
      CALL KCOPY(STATEV(10),FP,3*3)      ! F PLASTIC
      DO ISP=1,NSP
        GAMMA(ISP)=STATEV(18+ISP)        ! GAMMA OF EACH SLIP SYSTEM
        TAUCR(ISP)=STATEV(18+NSP+ISP)    ! YIELD STRESS OF EACH SLIP SYSTEM
        TA(ISP)=STATEV(18+2*NSP+ISP)     ! RESOLVED SHEAR STRESS OF EACH SLIP SYSTEM
      END DO
      GAMMABART=STATEV(18+3*NSP+1)              ! GAMMABAR
      DELOGMISESMAGPLT=STATEV(18+3*NSP+2) ! DELOGMISESMAGPLT  
C
      FE0    = FE                        ! FE0(I,J) = FE(I,J)
      FP0    = FP                        ! FP0(I,J) = FP(I,J)
      GAMMAT = GAMMA                     ! GAMMAT(I) = GAMMA(I)
      TAUCRT = TAUCR                     ! TAUCRT(I) = TAUCR(I)
      TAT    = TA                        ! TAT(I)    = TA(I)
C
C*** BUILD HARDENING COEFFICIENT MATRIX HAB
C
      CALL KGETHAB(HABT,GAMMAT,FAB,NSP,T0,TI,H0,HS,G0,QQ,IHARDTYPE,
     + TAUCR,QAB,AA,TCS,H00,IHARDMODEL)  
C       
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' HABT'
        DO I=1,NSP
          WRITE(IOUT,1012) (HABT(I,J),J=1,NSP) 
        ENDDO
      END IF
C
C
      F0 = DFGRD0    ! F0(I,J) = DFGRD0(I,J)
      DXDX = DFGRD1  ! DXDX(I,J) = DFGRD1(I,J)
C
      CALL KDET3X3(F0,AJ0)
      CALL KDET3X3(DXDX,AJ)
C
C***  PRINTING OLD STATE VARIABLES AT TIME=T
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' FE0'
        WRITE(IOUT,1003) ((FE0(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' FP0'
        WRITE(IOUT,1003) ((FP0(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' F0'
        WRITE(IOUT,1003) ((F0(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' AJ0'
        WRITE(IOUT,1003) AJ0
        WRITE(IOUT,*) ' DXDX'
        WRITE(IOUT,1003) ((DXDX(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' AJ'
        WRITE(IOUT,1003) AJ
        WRITE(IOUT,*) ' GAMMA AT T'
        WRITE(IOUT,1006) (GAMMA(I),I=1,NSP)
        WRITE(IOUT,*) ' TAUCR AT T'
        WRITE(IOUT,1006) (TAUCR(I),I=1,NSP)
        WRITE(IOUT,*) ' TA AT T'
        WRITE(IOUT,1006) (TA(I),I=1,NSP)
        WRITE(IOUT,*) 'GAMMABART'
        WRITE(IOUT,1001) GAMMABART  
        WRITE(IOUT,*) 'DELOGMISESMAGPLT'
        WRITE(IOUT,1001) DELOGMISESMAGPLT 
      END IF
C
C***  UTILITY SUBROUTINE SINV RETURNS THE STRESS INVARIANTS 
C***  SINV1=-Skk/3     ,      SINV2=EQUIVALENT STRESS
C
      CALL SINV(STRESS,PT,SBART,NDI,NSHR)
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' -SKK/3,SBAR AT TIME T'
        WRITE(IOUT,1001) PT,SBART
      END IF
C
C*** CONVERT STRESS(NTENS) TO CAUCHY(3,3)
C
      CALL KCOPY12(STRESS,CAUCHY,NTENS)
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' STRESS with Hughes-Winget'
        WRITE(IOUT,1006) (STRESS(I),I=1,NTENS)
        WRITE(IOUT,*) ' CAUCHY with Hughes-Winget'
        WRITE(IOUT,1003) ((CAUCHY(I,J),J=1,3),I=1,3)
      END IF
C
C*** REMOVE THE HUGHES-WINGET ROTATION 
C
      DROTT = TRANSPOSE(DROT)
      CALL KMULT(DROTT,CAUCHY,SCR1,3,3,3)
      CALL KMULT(SCR1,DROT,CAUCHY,3,3,3)
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' DROT'
        WRITE(IOUT,1003) ((DROT(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' CAUCHY without Hughes-Winget'
        WRITE(IOUT,1003) ((CAUCHY(I,J),J=1,3),I=1,3)
      END IF
C
C***  OBTAIN KIRCHOFF STRESS TAU FROM CAUCHY TRUE STRESS  |  T(I,J)=det(F)*CAUCHY(I,J)
C
      TAU = AJ0*CAUCHY ! TAU(I,J)=AJ0*CAUCHY(I,J)
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' TAU'
        WRITE(IOUT,1003) ((TAU(I,J),J=1,3),I=1,3)
      END IF
C     
C*** CONVERT DSTRAN(NTENS) TO DE(3,3)
C
      CALL KCOPY12(DSTRAN,DE,NTENS)
      DO I=1,3
      DO J=1,3
        IF (I.NE.J) DE(I,J)=0.5D0*DE(I,J)
      END DO
      END DO
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' DE'
        WRITE(IOUT,1003) ((DE(I,J),J=1,3),I=1,3)
      END IF
C
C*** REDUCE THE TIME INCREMENT IF THE STRAIN MAGNITUDE IS TOO LARGE
C
      IF (DEMAG.GT.10.D0*G0) THEN
        IF (IWR.NE.0) WRITE(IOUT,*) ' DEMAG > 10 G0'
        PNEWDT=0.5D0
        IF (IWR.NE.0) WRITE(IOUT,*) ' PNEWDT'
        IF (IWR.NE.0) WRITE(IOUT,1001) PNEWDT
        RETURN
      END IF
C
      DEMAGTOL = 1.D-10
C***************************************************************************************
C                                                                                     **
C***  IF DEMAG=0 THEN ABAQUS NEEDS ONLY DDSDDE FOR EQUILIBRIUM                         **
C***  UPDATE OF STATE VARIABLES IS NOT NECESSARY, SO WE SKIP THAT PART                **
C                                                                                     **
C     IF THIS POINT HAS EXPERIENCE PLASTICITY AT OLDER TIMES THEN CALCULATE           **
C     THE CORRECTED PLASTIC DDSDDE                                                    **
C***  UPDATE OF STATE VARIABLES IS NOT NECESSARY, SO WE SKIP THAT PART                **
      IF (DEMAG.LE.DEMAGTOL) GOTO 5000   !                          
C                                                                      **
C***************************************************************************************
C
C
C*** ELASTIC PREDICTION  ( CALCULATE FESTAR )
C
      IF (IWR.NE.0) WRITE(IOUT,*) ' CALCULATE FESTAR'
C
      CALL KINV3X3(FP0,FPINV,NOEL,NPT,KSTEP,KINC,ISING)      
c      IF (ISING.EQ.1) THEN
c        PNEWDT = 0.5D0
c        RETURN
c      END IF
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' FPINV'
        WRITE(IOUT,1003) ((FPINV(I,J),J=1,3),I=1,3)
      END IF
C
C*** FE*=DFRG1*INVERSE(FP)
C
      CALL KMULT(DXDX,FPINV,FESTAR,3,3,3)
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' FESTAR'
        WRITE(IOUT,1003) ((FESTAR(I,J),J=1,3),I=1,3)
      END IF
C      
C
C*** PLASTICITY
C
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' PLASTICITY'
        WRITE(IOUT,*)
      END IF
C
C*** FIND LOGARITHMIC DE(3,3)
C
      CALL KGETDELOG(DELOG,DTDT,F0,DXDX,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) THEN
        PNEWDT = 0.5D0
        RETURN
      END IF
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' DELOG'
        WRITE(IOUT,1003) ((DELOG(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' DTDT'
        WRITE(IOUT,1003) ((DTDT(I,J),J=1,3),I=1,3) 
      END IF
C
      CALL KLET(ALET,FE,CMX,TAU,UNIT2)
      CALL KINV3X3(FE,FEINV,NOEL,NPT,KSTEP,KINC,ISING)  
c      IF (ISING.EQ.1) RETURN
C   
      CALL KFCN(NSP,TAT,TAUCRT,FCNT,DFCNTA,DFCNTAUCR,
     + AMM,G0A)   
        IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' ISA, FCNT(ISA)'
          DO ISA=1,NSP
            WRITE(IOUT,1005) ISA,FCN(ISA)
          END DO
          WRITE(IOUT,*) ' ISA, DFCNTA(ISA)'
          DO ISA=1,NSP
            WRITE(IOUT,1005) ISA,DFCNTA(ISA)
          END DO
          WRITE(IOUT,*) ' ISA, DFCNTAUCR(ISA)' 
          DO ISA=1,NSP
           WRITE(IOUT,1005) ISA,DFCNTAUCR(ISA)
          END DO
      END IF
C
      DGAMMA = 0.D0   ! DGAMMA(I)   
c
C*** ESTIMATE FOR DGAMMA
C
      CALL KGETDL(DGAMMA,NSP,TAU,FE,SD0,SN0,DELOG,SD,SN,AM,
     + Q,ALET,XI,HABT,UNIT2,GAMMA,T0,TI,H0,HS,CMX,FAMB,AMAB,
     + TAT,DTIME,FCNT,DFCNTA,DFCNTAUCR,DTDT,          
     + NOEL,NPT,KSTEP,KINC,ISING,ATHETA)
      IF (ISING.EQ.1) THEN
        PNEWDT = 0.5D0
        RETURN
      END IF
C
C*** PRINT DGAMMA ESTIMATES FOR ALL SLIP SYSTEMS
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' FIRST ESTIMATE FOR DGAMMA FOR ALL SLIP SYSTEMS'
        WRITE(IOUT,*) ' ISA, DGAMMA(ISA)'
        DO ISA=1,NSP
          WRITE(IOUT,1005) ISA,DGAMMA(ISA)
        END DO
      END IF
C
C*** NEWTON'S LOOP FOR DGAMMA
C
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' NEWTON LOOP FOR DGAMMA STARTS'
      END IF
C
C
      DO 4000 ICOUNT=1,8
C
        IF (IWR.NE.0) THEN 
          WRITE(IOUT,*)
          WRITE(IOUT,*) ' ICOUNT'
          WRITE(IOUT,1002) ICOUNT
        END IF
C
C
        IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' DGAMMA'
          WRITE(IOUT,1006) (DGAMMA(I),I=1,NSP)
        END IF
C
C*** STOP DIVERGING LOOPS
C
        DO ISA=1,NSP
          IF ( DABS(DGAMMA(ISA)).GT.(100.D0*G0) ) THEN
            WRITE(IOUT,*)
            WRITE(IOUT,*) 
     +      ' DGAMMA>100 G0. NEWTON LOOP APPEARS TO BE DIVERGING'
            WRITE(IOUT,*) ' NOEL, NPT'
            WRITE(IOUT,1002) NOEL,NPT
            PNEWDT=0.5D0
            WRITE(IOUT,*) ' PNEWDT'
            WRITE(IOUT,1006) PNEWDT
            RETURN
          END IF  
        END DO
C***  GAMMA AT THE START OF THE INCREMENT
        IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' GAMMAT'
          WRITE(IOUT,1006) (GAMMA(I),I=1,NSP) 
        END IF
C        
C*** FIND NEW GAMMA
C
        DO ISA=1,NSP
          GAMMA(ISA)=GAMMAT(ISA)+DGAMMA(ISA)
        END DO
      IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' GAMMA'
          WRITE(IOUT,1006) (GAMMA(I),I=1,NSP)
      END IF      
C           
C
C*** FIND B MATRIX 
C
        DO I=1,3
        DO J=1,3
          AUX=0.D0
          DO ISA=1,NSP
            AUX=AUX+DGAMMA(ISA)*SD0(I,ISA)*SN0(J,ISA)
          END DO
          SCR1(I,J)= -AUX  ! SCR1=-B, B= SUM(Deltagamma_i s0_i m0_i)
        END DO
        END DO
C
C*** FIND EXPONENTIAL OF B AND SAVE IT TO SCR3 (KMATRIXEXP FINDS THE EXACT EXPONENTIAL OF B)
C
        CALL KMATRIXEXP(SCR1,SCR3)
        IF (IWR.NE.0) THEN
            WRITE(IOUT,*) ' EXACT EXPONENTIAL MATRIX'
            WRITE(IOUT,1003) ((SCR3(I,J),J=1,3),I=1,3)
        END IF
C
C*** FE=FESTAR*EXP(B)=FESTAR*SCR3
C
        CALL KMULT(FESTAR,SCR3,FE,3,3,3)
        IF (IWR.NE.0) THEN 
          WRITE(IOUT,*) ' FE'
          WRITE(IOUT,1003) ((FE(I,J),J=1,3),I=1,3)
        END IF
C
C*** LEFT CAUCHY TENSOR IS CALCULATED BY TRANSPOSE(FE)*FE AND SAVED TO CE
C
        FET = TRANSPOSE(FE)
        CALL KMULT(FET,FE,CE,3,3,3)
C
C*** CALCULATE E
C
        DO I=1,3
        DO J=1,3
          EE(I,J)=0.5D0*(CE(I,J)-UNIT2(I,J))
        END DO
        END DO
C
C*** FIND SE=LE*EE=CMX*EE
C
        CALL KMULT4X2(CMX,EE,SE)
C
C*** FIND MANDEL STRESS SIGMA IN THE INTERMEDIATE CONFIGURATION
C
        CALL KMULT(SE,CE,SIGMA,3,3,3)
        IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' EE'
          WRITE(IOUT,1003) ((EE(I,J),J=1,3),I=1,3)
          WRITE(IOUT,*) ' SE'
          WRITE(IOUT,1003) ((SE(I,J),J=1,3),I=1,3)
          WRITE(IOUT,*) ' SIGMA'
          WRITE(IOUT,1003) ((SIGMA(I,J),J=1,3),I=1,3)
        END IF
C
C*** BUILD NEW HARDENING COEFFICIENT MATRIX 
C
C      
      CALL KGETHAB(HAB,GAMMA,FAB,NSP,T0,TI,H0,HS,G0,QQ,IHARDTYPE,
     + TAUCR,QAB,AA,TCS,H00,IHARDMODEL)      
C*** CACLULATE NEW TAUCR 
          IF (IHARDMODEL.EQ.1) THEN
        CALL KTAUCR(TAUCR,HAB,HABT,DGAMMA,TAUCRT,NSP) 
          ELSE
        CALL KTAUCRG(TAUCR,HAB,HABT,DGAMMA,TAUCRT,NSP,TCS)   
          END IF
        IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' TAUCR'  
          WRITE(IOUT,1006) (TAUCR(I),I=1,NSP)
        END IF      
C
C
C*** CACLULATE NEW TA
        CALL KTA(NSP,SD0,SN0,SIGMA,TA)  
      IF (IWR.NE.0) THEN
          WRITE(IOUT,*) ' TA'  
          WRITE(IOUT,1006) (TA(I),I=1,NSP)
      END IF
C  
C*** CACLULATE NEW FCN,DFCNTA,DFCNTAUCR USING DGAMMA ESTIMATE 
      CALL KFCN(NSP,TA,TAUCR,FCN,DFCNTA,DFCNTAUCR,
     + AMM,G0A)    
        IF (IWR.NE.0) THEN        
          WRITE(IOUT,*) ' FCN(ISA) AT THE END OF THE INCREMENT' 
          WRITE(IOUT,*) ' ISA, FCN(ISA)'            
          DO ISA=1,NSP
            WRITE(IOUT,1005) ISA,FCN(ISA)
          END DO
          WRITE(IOUT,*) ' DFCNTA(ISA) AT THE END OF THE INCREMENT' 
          WRITE(IOUT,*) ' ISA, DFCNTA(ISA)'
          DO ISA=1,NSP
            WRITE(IOUT,1005) ISA,DFCNTA(ISA)
          END DO
          WRITE(IOUT,*) ' DFCNTAUCR(ISA) AT THE END OF THE INCREMENT' 
          WRITE(IOUT,*) ' ISA, DFCNTAUCR(ISA)' 
          DO ISA=1,NSP
           WRITE(IOUT,1005) ISA,DFCNTAUCR(ISA)
          END DO
        END IF
C
C*** CHECK WHETHER WE SKIP NEWTON LOOP
C 
       FMAX=0.D0
       DO ISP=1,NSP
         IF (DABS(TAT(ISP)).GT.FMAX) FMAX=DABS(TAT(ISP))
       END DO
C
       IF(FMAX.LT.YIELDTOL) THEN
        IF (IWR.NE.0) THEN  
         WRITE(IOUT,*) ' TAT<YIELDTOL, SKIP NEWTON LOOP'
        END IF
         GOTO 4005
       END IF
C
       GMAX=0.D0
       DO ISP=1,NSP
         IF (DABS(DGAMMA(ISP)).GT.GMAX) GMAX=DABS(DGAMMA(ISP))
       END DO
C
       DGAMMATOL=0.1D0*DEMAG  
       IF(GMAX.LT.DGAMMATOL) THEN
        IF (IWR.NE.0) THEN 
         WRITE(IOUT,*) ' DGAMMA<DGAMMATOL, SKIP NEWTON LOOP'
        END IF
         GOTO 4005
       END IF
C
C*** CHECK ENDS
C*** CHECK FOR CONVERGENCE OF THE NEWTON LOOP
C      
C      CALL KRA(NSP,DGAMMA,DTIME,FCN,FCNT,ARA,ATHETA)  
C        IF (IWR.NE.0) THEN    
C          WRITE(IOUT,*) ' ISA, ARA(ISA)'       
C          DO ISA=1,NSP                        
C            WRITE(IOUT,1005) ISA,ARA(ISA)
C          END DO
C        END IF
C      
      CALL KRADEMAG(NSP,DGAMMA,DTIME,FCN,FCNT,ARADEMAG,DEMAG,ATHETA)  
        IF (IWR.NE.0) THEN    
          WRITE(IOUT,*) ' ISA, ARADEMAG(ISA)'       
          DO ISA=1,NSP                        
            WRITE(IOUT,1005) ISA,ARADEMAG(ISA)
          END DO
        END IF
C  
C      CALL KFA(NSP,DGAMMA,DTIME,TA,TAT,TAUCR,TAUCRT,AFA,AMM,G0A,ATHETA) 
C        IF (IWR.NE.0) THEN    
C          WRITE(IOUT,*) ' ISA, AFA(ISA)'       
C          DO ISA=1,NSP
C            WRITE(IOUT,1005) ISA,AFA(ISA)
C          END DO
C        END IF  
C
C*** CHECK FOR CONVERGENCE OF THE NEWTON LOOP
C      
        DO ISA=1,NSP
         IF (DABS(ARADEMAG(ISA)).GT.RESTOL) GOTO 3040 
        END DO        
C        DO ISA=1,NSP
C         IF (DABS(AFA(ISA)).GT.YIELDTOL) GOTO 3040 
C        END DO
C        
C*** EXIT NEWTON LOOP      
C    
        GOTO 4005
C
 3040 CONTINUE
C
C*** NOW SOLVE FOR DGAMMA
C     
C      CALL KGETDGR(DGAMMA,NSP,AM,XI,HABT,TAT,DTIME,FCN,FCNT,DFCNTA,DFCNTAUCR, 
C     + NOEL,NPT,KSTEP,KINC,ISING,ATHETA)      
C      IF (ISING.EQ.1) THEN    
C        PNEWDT = 0.5D0
C        RETURN
C      END IF  
C
      CALL KGETDGRDEMAG(DGAMMA,NSP,AM,XI,HABT,TA,TAT,TAUCR,DTIME,FCN, 
     + FCNT,DFCNTA,DFCNTAUCR,NOEL,NPT,KSTEP,KINC,ISING,DEMAG,AMM,      
     + G0A,ATHETA)
      IF (ISING.EQ.1) THEN    
        PNEWDT = 0.5D0
        RETURN
      END IF  
C
C      CALL KGETDGF(DGAMMA,NSP,AM,XI,HAB,HABT,
C     + TA,TAT,TAUCR,TAUCRT,DTIME,NOEL,NPT,KSTEP,KINC,ISING,AMM,G0A,ATHETA)
C      IF (ISING.EQ.1) THEN   
C        PNEWDT = 0.5D0
C        RETURN
C      END IF
C
 4000 CONTINUE
C
C*** NEWTON LOOP ENDS
C
      PNEWDT=0.5D0
        WRITE(IOUT,*) ' NEWTON''S LOOP IN UMAT DOES NOT CONVERGE'
        WRITE(IOUT,*) ' NOEL, NPT, KINC'
        WRITE(IOUT,1002) NOEL,NPT,KINC
      RETURN
C      
 4005 CONTINUE
      IF (IWR.NE.0) THEN
      WRITE(IOUT,*)
      WRITE(IOUT,*) ' NEWTON LOOP CONVERGES AFTER ',ICOUNT,' ITERATIONS' 
      WRITE(IOUT,*)
      END IF      
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*)
        WRITE(IOUT,*)
     +   'STRESS AND STATEV ARE NOW UPDATED'
        WRITE(IOUT,*)
      END IF
C
C*** UPDATE STRESSES
C
      CALL KMULT(FE,SE,SCR1,3,3,3)
      CALL KMULT(SCR1,FET,TAU,3,3,3)
      IF (IWR.NE.0) WRITE(IOUT,*) ' TAU'
      IF (IWR.NE.0) WRITE(IOUT,1003) ((TAU(I,J),J=1,3),I=1,3)
C
      CAUCHY = TAU/AJ ! CAUCHY(I,J)=TAU(I,J)/AJ
C
      CALL KCOPY21(CAUCHY,STRESS,NTENS)
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' CAUCHY'
        WRITE(IOUT,1003) ((CAUCHY(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' STRESS'
        WRITE(IOUT,1003) (STRESS(I),I=1,NTENS)
      END IF
C
C*** UPDATE STATE VARIABLES
C
      CALL KINV3X3(FE,FEINV,NOEL,NPT,KSTEP,KINC,ISING)    
C      IF (ISING.EQ.1) THEN
C        PNEWDT = 0.5D0
C        RETURN
C      END IF
      CALL KMULT(FEINV,DXDX,FP,3,3,3)
C
      CALL KDET3X3(FP,DETFP)
      CALL KDET3X3(FE,DETFE)
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' FP'
        WRITE(IOUT,1003) ((FP(I,J),J=1,3),I=1,3)
        WRITE(IOUT,*) ' DETFP, DETFE'
        WRITE(IOUT,1003) DETFP,DETFE
      END IF

      CALL KCOPY(FE,STATEV(1),3*3)
      CALL KCOPY(FP,STATEV(10),3*3)
      DO ISP=1,NSP
        STATEV(18+ISP)=GAMMA(ISP)
        STATEV(18+NSP+ISP)=TAUCR(ISP)
        STATEV(18+2*NSP+ISP)=TA(ISP)       
      END DO
C
C
      DGAMMABAR=0.D0
      DO ISA=1,NSP
        DGAMMABAR=DGAMMABAR+DSIGN(1.D0,TA(ISA))*DGAMMA(ISA)
      ENDDO
      GAMMABAR = GAMMABART + DGAMMABAR
      STATEV(18+3*NSP+1)=GAMMABAR   
C
C
 5000 CONTINUE
C
C*** PLASTIC JACOBIAN
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' PLASTIC JACOBIAN'
      END IF
C
      CALL KLET(ALET,FE,CMX,TAU,UNIT2)
      CALL KINV3X3(FE,FEINV,NOEL,NPT,KSTEP,KINC,ISING) 
C      IF (ISING.EQ.1) THEN
C        PNEWDT = 0.5D0
C        RETURN
C      END IF
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' EXITS KINV'
      END IF 
C  
      CALL KGETHAB(HAB,GAMMA,FAB,NSP,T0,TI,H0,HS,G0,QQ,IHARDTYPE,
     + TAUCR,QAB,AA,TCS,H00,IHARDMODEL) 
C      
      DO 5100 ISA=1,NSP
        CALL KMULT(FE,SD0(:,ISA),SD(:,ISA),3,3,1)
        CALL KMULT(SN0(:,ISA),FEINV,SN(:,ISA),1,3,3)
        DO I=1,3
        DO J=1,3
          AL(I,J)=SD(I,ISA)*SN(J,ISA)
        END DO
        END DO
        DO I=1,3
        DO J=1,3
          AM(I,J,ISA)=0.5D0*(AL(I,J)+AL(J,I))
          AW(I,J)=0.5D0*(AL(I,J)-AL(J,I))
        END DO
        END DO
        CALL KMULT(AW,TAU,SCR1,3,3,3)
        CALL KMULT(TAU,AW,SCR2,3,3,3)
        DO I=1,3
        DO J=1,3
          BETA(I,J)=SCR1(I,J)-SCR2(I,J)
        END DO
        END DO
        CALL KMULT4X2(ALET,AM(:,:,ISA),SCR1)
        DO I=1,3
        DO J=1,3
          PHI(I,J,ISA)=SCR1(I,J)+BETA(I,J)
        END DO
        END DO
        CALL KMULT(SN(:,ISA),TAU,V1,1,3,3)
        CALL KMULT(TAU,SD(:,ISA),V2,3,3,1)
        DO I=1,3
        DO J=1,3
          Q(I,J)=V1(I)*SD(J,ISA)-SN(I,ISA)*V2(J)
        END DO
        END DO
        CALL KMULT2X4(AM(:,:,ISA),ALET,SCR1)
        DO I=1,3
        DO J=1,3
          XI(I,J,ISA)=SCR1(I,J)+Q(I,J)
        END DO
        END DO
C
 5100 CONTINUE
C    
C*** FIND DELOGMISES3X3PL
        DO I=1,3
        DO J=1,3
          AUX=0.D0  
          DO ISA=1,NSP
            AUX=AUX+DGAMMA(ISA)*AM(I,J,ISA)
          END DO  
        DELOGMISES3X3PL(I,J)=AUX
        END DO
        END DO 
C
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' DELOGMISES3X3PL'
        WRITE(IOUT,1003) ((DELOGMISES3X3PL(I,J),J=1,3),I=1,3)
      END IF 
C
C
      CALL KTTOVSTRN(DELOGMISES3X3PL,DELOGMISESPL,NDI,
     + NSHR,NTENS)
      
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*) ' DELOGMISESPL'
        WRITE(IOUT,1006) (DELOGMISESPL(I),I=1,NTENS)
      END IF      
C
C*** CALCULATE THE MISES EQV PLASTIC STRAIN MAGNITUDE FROM INCREMENT IN STRAIN COMPONENTS
C
      DELOGMISESPLASTICMAG=0.D0
      DO I=1,NDI
        DELOGMISESPLASTICMAG=DELOGMISESPLASTICMAG+
     +  DELOGMISESPL(I)*DELOGMISESPL(I)
      END DO
      DO I=1,NSHR
        DELOGMISESPLASTICMAG=DELOGMISESPLASTICMAG +  
     +  0.5D0*DELOGMISESPL(NDI+I)*DELOGMISESPL(NDI+I)
      END DO
      DELOGMISESPLASTICMAG=DSQRT(2.D0*DELOGMISESPLASTICMAG/3.D0)
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' DELOGMISESPLASTICMAG'
        WRITE(IOUT,1001) DELOGMISESPLASTICMAG
      END IF
C
      DELOGMISESMAGPL=0.D0

      DELOGMISESMAGPL = DELOGMISESMAGPLT + 
     + DELOGMISESPLASTICMAG
      STATEV(18+3*NSP+2)=DELOGMISESMAGPL  
C          
C*** BUILD ANAB AND BA
C***  DEFINITION OF THE IDENTITY TENSOR
C     
      UNIT3 = 0.D0 ! UNIT3(I,J)=0.D0
      DO I=1,NSP
        UNIT3(I,I)=1.D0		       
      END DO
C      
      CALL KFCN(NSP,TA,TAUCR,FCN,DFCNTA,DFCNTAUCR,
     + AMM,G0A)  
C
      DO ISA=1,NSP
        DO ISB=1,NSP  
          CALL KMULT2X2(XI(:,:,ISA),AM(:,:,ISB),AUX)
          FAMB(ISA,ISB)=AUX
            ANAB(ISA,ISB)=UNIT3(ISA,ISB) +
     +      DTIME*ATHETA*(DFCNTA(ISA)*FAMB(ISA,ISB) -                  
     +      DSIGN(1.D0,TA(ISB))*DFCNTAUCR(ISA)*(HAB(ISA,ISB)))              
        END DO 
      END DO 
C          
C*** FIND INVERSE OF ANAB
C
      CALL KINV(ANAB,AMAB,NSP,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
C
C*** AMAB IS NOW KNOWN 
      AT = 0.D0 
      DO ISA=1,NSP
        DO ISB=1,NSP
          DO I=1,3
          DO J=1,3
            AT(I,J,ISA)=AT(I,J,ISA)+
     +      ATHETA*DTIME*AMAB(ISA,ISB)*XI(I,J,ISB)*DFCNTA(ISB)
          END DO
          END DO
        END DO
      END DO
C
      ALJ = 0.D0 
      DO ISA=1,NSP
        DO I=1,3
        DO J=1,3
        DO K=1,3
        DO L=1,3
          ALJ(I,J,K,L)=ALJ(I,J,K,L)-PHI(I,J,ISA)*AT(K,L,ISA)
        END DO
        END DO
        END DO
        END DO
      END DO
C
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        ALJ(I,J,K,L)=ALJ(I,J,K,L)+ALET(I,J,K,L) 
      END DO
      END DO
      END DO
      END DO
C
      CALL KCOPY42(ALJ,DDSDDE,NTENS)
c
C    
C*** 
C*** CALCULATE THE DIFF MATRIX  WHICH STORES THE PERCENTAGE UNSYMMETRY OF DDSDDE
C
      DDSDDET=TRANSPOSE(DDSDDE)
      DO I=1,NTENS
          DO J=1,NTENS
              AV=0.5D0*DABS(DDSDDE(I,J)+DDSDDET(I,J))
              DI=DABS(DDSDDE(I,J)-DDSDDET(I,J))
              DIFF(I,J)=100.D0*DI/AV
          END DO
      END DO
C     
      DIFMAX=0.D0
      DO I=1,NTENS
          DO J=1,NTENS
              IF (DIFF(I,J).GT.DIFMAX) THEN
                  DIFMAX=DIFF(I,J)
                  IPMAX=I
                  JPMAX=J
              END IF
          END DO
      END DO
      IDIFMAX=NINT(DIFMAX)
C    
C
C
      IF (IWR.NE.0) THEN 
        WRITE(IOUT,*) ' PLASTIC DDSDDE (or L_J) MATRIX'
        WRITE(IOUT,1006) ((DDSDDE(I,J),J=1,NTENS),I=1,NTENS)
        WRITE(IOUT,*)
        WRITE(IOUT,*) ' UNSYMMETRY OF PLASTIC DDSDDE(%)'
        WRITE(IOUT,1006) ((DIFF(I,J),J=1,NTENS),I=1,NTENS)
      END IF
C
C*** PRINT THE MAXIMUM ELEMENT OF DIFF(I,J)
C
C      IF (KINC.GE.79.AND.NPT.EQ.1) IWR=1
C      IF (IWR.NE.0) THEN
C          WRITE(IOUT,*)
C          WRITE(IOUT,*) 'MAXIMUM UNSYMMETRY (%) '
C          WRITE(IOUT,1010) IDIFMAX
C          WRITE(IOUT,*) 'BETWEEN COMPONENTS'
C          WRITE(IOUT,'(3X,I1,"-",I1)') IPMAX,JPMAX
C      END IF
C      IWR=0
C
      GOTO 9999
C
 9999 CONTINUE
      IF (IWR.NE.0) THEN
        WRITE(IOUT,*)
        WRITE(IOUT,*)
      END IF
C
      RETURN
 1001 FORMAT(1P8E13.5)
 1002 FORMAT(10I5)
 1003 FORMAT(1P3E13.5)
 1005 FORMAT(I5,1P6E13.5)
 1006 FORMAT(1P6E13.5)
 1009 FORMAT(1P9E12.4)
 1010 FORMAT(10I9)
 1012 FORMAT(1P12E9.1)
C
      END
C      
C***********************************************************************
C
      SUBROUTINE KCELAST(C11,C12,C44,A1,A2,A3,CMX)
C
C*** FORMS ELASTIC STIFFNESS MATRIX FROM ELASTIC CONSTANTS
C    THE CMX MATRIX IS WITH RESPECT TO THE GLOBAL SYSTEM
C    THEREFORE WE HAVE TO ROTATE THE CRYSTAL AXES 
C    AND WE DO THAT BY n(i)=Q(k,i)*e(k)
C    WHERE n(i) ARE THE CRYSTAL AXES
C    AND e(i) ARE THE GLOBAL AXES
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION CMX(3,3,3,3),A1(3),A2(3),A3(3)
C
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        CMX(I,J,K,L)=
     +  C11*(A1(I)*A1(J)*A1(K)*A1(L)+A2(I)*A2(J)*A2(K)*A2(L)+
     +       A3(I)*A3(J)*A3(K)*A3(L) ) +
     +  C12*(A1(I)*A1(J)*A2(K)*A2(L)+A2(I)*A2(J)*A1(K)*A1(L)+
     +       A1(I)*A1(J)*A3(K)*A3(L)+A3(I)*A3(J)*A1(K)*A1(L)+
     +       A2(I)*A2(J)*A3(K)*A3(L)+A3(I)*A3(J)*A2(K)*A2(L) ) +
     +  C44*(A1(I)*A2(J)*A1(K)*A2(L)+A2(I)*A1(J)*A1(K)*A2(L)+
     +       A1(I)*A2(J)*A2(K)*A1(L)+A2(I)*A1(J)*A2(K)*A1(L)+
     +       A1(I)*A3(J)*A1(K)*A3(L)+A3(I)*A1(J)*A1(K)*A3(L)+
     +       A1(I)*A3(J)*A3(K)*A1(L)+A3(I)*A1(J)*A3(K)*A1(L)+
     +       A2(I)*A3(J)*A2(K)*A3(L)+A3(I)*A2(J)*A2(K)*A3(L)+
     +       A2(I)*A3(J)*A3(K)*A2(L)+A3(I)*A2(J)*A3(K)*A2(L) )
      END DO
      END DO
      END DO
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KLET(ALET,FE,CMX,TAU,UNIT2)
C
C*** FORMS THE LET MODULI COMBINING CMX (ELASTIC STIFFNESS) AND T
C    LET IS THE ELASTIC PART OF DDSDDE WHEN CONVERTED TO A 2ND ORDER MATRIX
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION ALET(3,3,3,3),FE(3,3),CMX(3,3,3,3),TAU(3,3),UNIT2(3,3)
C
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        AUX=0.D0
        DO M=1,3
        DO N=1,3
        DO IP=1,3
        DO IQ=1,3
          AUX=AUX+FE(I,M)*FE(J,N)*FE(K,IP)*FE(L,IQ)*CMX(M,N,IP,IQ)
        END DO
        END DO
        END DO
        END DO
        ALET(I,J,K,L)=AUX
      END DO
      END DO
      END DO
      END DO
C
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        ALET(I,J,K,L)=ALET(I,J,K,L)+0.5D0*(TAU(I,K)*UNIT2(J,L)+
     +  TAU(I,L)*UNIT2(J,K)+UNIT2(I,K)*TAU(J,L)+UNIT2(I,L)*TAU(J,K))
      END DO
      END DO
      END DO
      END DO
C
      END
C
C***********************************************************************
C 
      SUBROUTINE KGETHAB(HAB,GAMMA,FAB,NSP,T0,TI,H0,HS,G0,QQ,IHARDTYPE,
     + TAUCR,QAB,AA,TCS,H00,IHARDMODEL)     
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION HAB(NSP,NSP),GAMMA(NSP),FAB(NSP,NSP)
      DIMENSION HB(NSP),QAB(NSP,NSP),TAUCR(NSP)
C
      HAB = 0.D0 ! HAB(I,J)
C
      IF (IHARDMODEL.EQ.1) THEN
C**BASSANI AND WU HARDENING MODEL
      DO ISA=1,NSP
        A=(H0-HS)*DABS(GAMMA(ISA))/(TI-T0)     
        SECH=1.D0/DCOSH(A)
        FA=(H0-HS)*SECH*SECH+HS
        GB=1.D0
        DO ISB=1,NSP
          IF (ISB.NE.ISA) GB=GB+FAB(ISA,ISB)*DTANH(DABS(GAMMA(ISB))/G0) 
        END DO
        HAB(ISA,ISA)=FA*GB
      END DO          
C
      DO ISA=1,NSP
      DO ISB=1,NSP
        IF (ISB.NE.ISA) THEN
          IF (IHARDTYPE.EQ.1) THEN
            HAB(ISB,ISA)=QQ*HAB(ISA,ISA)
          ELSE
            HAB(ISB,ISA)=QQ*(HAB(ISA,ISA)+HAB(ISB,ISB))
          END IF
        END IF   
      END DO
      END DO
C      
      ELSE      
C**2ND HARDENING MODEL      
      DO ISA=1,NSP
        DO ISB=1,NSP 
        HB(ISB)=H00*(1.D0-(TAUCR(ISB)/TCS))**AA 
          IF (IHARDTYPE.EQ.1) THEN
          HAB(ISA,ISB)=QAB(ISA,ISB)*HB(ISB)
          ELSE        
          HAB(ISA,ISB)=QAB(ISA,ISB)*(HB(ISB)+HB(ISA))        
          END IF              
        END DO              
      END DO 
      END IF
C
      END
C
C***********************************************************************
C
      SUBROUTINE KTAUCR(TAUCR,HAB,HABT,DGAMMA,TAUCRT,NSP)
C
C*** FINDS THE CRITICAL SHEAR STRESS FOR ALL SLIP SYSTEMS
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION TAUCR(NSP),HAB(NSP,NSP),HABT(NSP,NSP),DGAMMA(NSP),
     + TAUCRT(NSP)
C
      BETA=0.5D0
      DO ISA=1,NSP
        AUX=0.D0
        DO ISB=1,NSP
          AUX=AUX+
     + ((1.D0-BETA)*HABT(ISA,ISB)+
     +  BETA*HAB(ISA,ISB))*DABS(DGAMMA(ISB))
        END DO
        TAUCR(ISA)=TAUCRT(ISA)+AUX
      END DO
C
C
      END
C
C***********************************************************************
C
      SUBROUTINE KTAUCRG(TAUCR,HAB,HABT,DGAMMA,TAUCRT,NSP,TCS)
C
C*** FINDS THE CRITICAL SHEAR STRESS FOR ALL SLIP SYSTEMS
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION TAUCR(NSP),HAB(NSP,NSP),HABT(NSP,NSP),DGAMMA(NSP),
     + TAUCRT(NSP)
C
C
      TOLSAT=0.99D0*TCS   
C
      BETA=0.0D0
      DO ISA=1,NSP
        AUX=0.D0
        DO ISB=1,NSP
          AUX=AUX+
     + ((1.D0-BETA)*HABT(ISA,ISB)+
     +  BETA*HAB(ISA,ISB))*DABS(DGAMMA(ISB))
        END DO
        TAUCR(ISA)=TAUCRT(ISA)+AUX
** PROVISION ADDED FOR SATURATION STRESS
        IF (TAUCR(ISA).GE.TOLSAT) THEN
        TAUCR(ISA)=TOLSAT
        END IF         
      END DO
C
C
      END
C
C***********************************************************************
C
      SUBROUTINE KTA(NSP,SD0,SN0,SIGMA,TA)
C** CALCULATES TA KIRCHOFF STRESS AT THE END OF THE INCREMENT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION SD0(3,NSP),SN0(3,NSP),SIGMA(3,3),TA(NSP)
      DIMENSION SCR(3)
C
      DO ISA=1,NSP
        CALL KMULT(SN0(1,ISA),SIGMA,SCR,1,3,3)
        CALL KMULT(SCR,SD0(1,ISA),T,1,3,1)
        TA(ISA)=T
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KRA(NSP,DGAMMA,DTIME,FCN,FCNT,ARA,ATHETA)
C** CALCULATES R(DGAMMA(ISA)) AT THE END OF THE INCREMENT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION ARA(NSP),DGAMMA(NSP),FCN(NSP),FCNT(NSP)
C
      DO ISA=1,NSP
              ARA(ISA)= DGAMMA(ISA)/DTIME-((1.D0-ATHETA)*FCNT(ISA) +
     +        ATHETA*FCN(ISA))    
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KRADEMAG(NSP,DGAMMA,DTIME,FCN,FCNT,ARADEMAG,DEMAG,
     + ATHETA)
C** CALCULATES ARADEMAG(DGAMMA(ISA)) AT THE END OF THE INCREMENT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION ARADEMAG(NSP),DGAMMA(NSP),FCN(NSP),FCNT(NSP)
C
      DO ISA=1,NSP
          ARADEMAG(ISA)= DGAMMA(ISA)/DEMAG -(DTIME/DEMAG)*                 
     + ((1.D0-ATHETA)*FCNT(ISA)+ATHETA*FCN(ISA))
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KFA(NSP,DGAMMA,DTIME,TA,TAT,TAUCR,TAUCRT,AFA,AMM,G0A,
     + ATHETA)
C** CALCULATES F(DGAMMA(ISA)) AT THE END OF THE INCREMENT
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION TA(NSP),TAT(NSP),TAUCR(NSP),TAUCRT(NSP),AFA(NSP),
     + DGAMMA(NSP)
C 
      DO ISA=1,NSP
              AFA(ISA)=TA(ISA) - DSIGN(1.D0,TA(ISA))* 
     +        TAUCR(ISA)*(DABS(DGAMMA(ISA))/(ATHETA*DTIME*G0A)-      
     +        ((1.D0-ATHETA)/ATHETA)*(DABS(TAT(ISA))/TAUCRT(ISA))
     +        **(1.D0/AMM))**AMM        
      END DO
C
      END
C
C***********************************************************************
C 
      SUBROUTINE KFCN(NSP,TA,TAUCR,FCN,DFCNTA,DFCNTAUCR,
     + AMM,G0A)      
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION TA(NSP),TAUCR(NSP),FCN(NSP),DFCNTA(NSP),DFCNTAUCR(NSP)
C
C 
       DO IA=1,NSP
          IF (TA(IA).NE.0) THEN 
          FCN(IA)=G0A*DSIGN(1.D0,TA(IA))*
     +    (DABS(TA(IA))/TAUCR(IA))**(1.D0/AMM)       
        DFCNTA(IA)=FCN(IA)/(AMM*TA(IA))       
        DFCNTAUCR(IA)=-FCN(IA)/(AMM*TAUCR(IA))
          ELSE
              FCN(IA)=0.D0   
              DFCNTA(IA)=0.D0 
              DFCNTAUCR(IA)=0.D0 
          END IF
       END DO
C
      END
C
C***********************************************************************
C CALCULATES IMPROVEMENT OF THE DGestimate FOR THE RESIDUAL R EQUATION 
C
      SUBROUTINE KGETDGR(DGAMMA,NSP,AM,XI,HAB,
     + TA,DTIME,FCN,FCNT,DFCNTA,DFCNTAUCR,NOEL,NPT,KSTEP,KINC,
     + ISING,ATHETA) 
C
C*** FINDS DGAMMA AFTER THE IMPROVEMENT
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DGAMMA(NSP),DGAMMAIMPROVE(NSP),AM(3,3,NSP),XI(3,3,NSP), 
     + HAB(NSP,NSP),ANAB(NSP,NSP),FAMB(NSP,NSP),
     + UNIT3(NSP,NSP),TA(NSP)
      DIMENSION DFCNTA(NSP),DFCNTAUCR(NSP),AMAB(NSP,NSP),
     + BETA(NSP),FCN(NSP),FCNT(NSP)        
C
C*** BUILD ANAB AND BA
C***  DEFINITION OF THE IDENTITY TENSOR
C     
      UNIT3 = 0.D0 ! UNIT3(I,J)=0.D0
      DO I=1,NSP
        UNIT3(I,I)=1.D0		       
      END DO
C
      DO ISA=1,NSP
        DO ISB=1,NSP  
          CALL KMULT2X2(XI(:,:,ISA),AM(:,:,ISB),AUX)
          FAMB(ISA,ISB)=AUX  
            ANAB(ISA,ISB)=UNIT3(ISA,ISB) +                     
     +      ATHETA*DTIME*(DFCNTA(ISA)*FAMB(ISA,ISB) -                  
     +      DSIGN(1.D0,TA(ISB))*DFCNTAUCR(ISA)*(HAB(ISA,ISB)))         
        END DO 
      END DO 
C         
C*** FIND INVERSE OF ANAB
C
      CALL KINV(ANAB,AMAB,NSP,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
C
      DO ISA=1,NSP
          BETA(ISA)= - (DGAMMA(ISA)-DTIME*((1-ATHETA)*FCNT(ISA)+
     +       ATHETA*FCN(ISA)))               
      END DO
C*** AMAB AND ba ARE NOW KNOWN AND Dgamma(ISA)_improvement IS CALCULATED BY 
C    MULTIPLYING AMAB AND BETA(ISB)
       DGAMMAIMPROVE=0.D0 
       DO ISA=1,NSP
         DO ISB=1,NSP
           DGAMMAIMPROVE(ISA)=DGAMMAIMPROVE(ISA)+AMAB(ISA,ISB)*BETA(ISB) 
         END DO
       END DO    
C
      DO ISA=1,NSP
        DGAMMA(ISA)=DGAMMA(ISA)+DGAMMAIMPROVE(ISA)
      END DO
C       
C
      END      
C
C***********************************************************************
C CALCULATES IMPROVEMENT OF THE DGestimate 
C
      SUBROUTINE KGETDGRDEMAG(DGAMMA,NSP,AM,XI,HAB,TA,TAT,TAUCR,
     + DTIME,FCN,FCNT,DFCNTA,DFCNTAUCR,NOEL,NPT,KSTEP,KINC,
     + ISING,DEMAG,AMM,G0A,ATHETA) 
C
C*** FINDS DGAMMA AFTER THE IMPROVEMENT
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DGAMMA(NSP),DGAMMAIMPROVE(NSP),AM(3,3,NSP),XI(3,3,NSP), 
     + HAB(NSP,NSP),ANAB(NSP,NSP),FAMB(NSP,NSP),
     + UNIT3(NSP,NSP),TA(NSP),TAT(NSP),TAUCR(NSP)
      DIMENSION DFCNTA(NSP),DFCNTAUCR(NSP),AMAB(NSP,NSP),
     + BETA(NSP),FCN(NSP), FCNT(NSP)       
      DIMENSION AUX1(NSP,NSP),AUX2(NSP,NSP),AUX3(NSP),AUX4(NSP,NSP),
     + AUX5(NSP,NSP),AUX6(NSP)
C
C  
C*** BUILD ANAB AND BA
C***  DEFINITION OF THE IDENTITY TENSOR
C     
      UNIT3 = 0.D0 ! UNIT3(I,J)=0.D0
      DO I=1,NSP
        UNIT3(I,I)=1.D0		       
      END DO
C
      DO ISA=1,NSP
        DO ISB=1,NSP  
          CALL KMULT2X2(XI(:,:,ISA),AM(:,:,ISB),AUX)
          FAMB(ISA,ISB)=AUX  
          AUX1(ISA,ISB)=UNIT3(ISA,ISB)/DEMAG
          AUX2(ISA,ISB)= (FCN(ISA)*
     +        DTIME*ATHETA/(AMM*DEMAG))*(FAMB(ISA,ISB)/TA(ISA)+  
     +        DSIGN(1.D0,TAT(ISB))*(HAB(ISA,ISB))/TAUCR(ISA))
              ANAB(ISA,ISB)= AUX1(ISA,ISB)+ AUX2(ISA,ISB)        
        END DO 
      END DO   
C      
C*** FIND INVERSE OF ANAB
C
      CALL KINV(ANAB,AMAB,NSP,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
C
      DO ISA=1,NSP
          BETA(ISA)= -(DGAMMA(ISA)/DEMAG-(DTIME/DEMAG)*(             
     + (1-ATHETA)*FCNT(ISA)+ ATHETA*FCN(ISA)))                           
      END DO
C
C*** AMAB AND ba ARE NOW KNOWN AND Dgamma(ISA)_improvement IS CALCULATED BY 
C    MULTIPLYING AMAB AND BETA(ISB) 
       DGAMMAIMPROVE=0.D0 !
       DO ISA=1,NSP
         DO ISB=1,NSP
           DGAMMAIMPROVE(ISA)=DGAMMAIMPROVE(ISA)+AMAB(ISA,ISB)*BETA(ISB) 
         END DO
      END DO        
C
      DO ISA=1,NSP
        DGAMMA(ISA)=DGAMMA(ISA)+DGAMMAIMPROVE(ISA)
      END DO
c
      END      
C
C***********************************************************************
C 
C
      SUBROUTINE KGETDGF(DGAMMA,NSP,AM,XI,HAB,HABT,
     + TA,TAT,TAUCR,TAUCRT,DTIME,NOEL,NPT,KSTEP,KINC,ISING,AMM,
     + G0A,ATHETA)     
C
C*** FINDS DGAMMA AFTER THE IMPROVEMENT
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DGAMMA(NSP),DGAMMAIMPROVE(NSP),AM(3,3,NSP),XI(3,3,NSP), 
     + HAB(NSP,NSP),HABT(NSP,NSP),ANAB(NSP,NSP),FAMB(NSP,NSP),
     + UNIT3(NSP,NSP),TA(NSP),TAT(NSP),TAUCR(NSP),TAUCRT(NSP)
      DIMENSION AMAB(NSP,NSP),BETA(NSP)
      DIMENSION AUX1(NSP,NSP),AUX2(NSP,NSP) 
C      
C*** BUILD ANAB AND BA
C***  DEFINITION OF THE IDENTITY TENSOR
C
      UNIT3= 0.D0 ! UNIT3(I,J)=0.D0
      DO I=1,NSP
        UNIT3(I,I)=1.D0		       
      END DO      
C
      DO ISA=1,NSP
        DO ISB=1,NSP  
          CALL KMULT2X2(XI(:,:,ISA),AM(:,:,ISB),AUX)
          FAMB(ISA,ISB)=AUX 
          AUX1(ISA,ISB)=UNIT3(ISA,ISB)*(AMM/(DTIME*G0A*ATHETA))*
     +    (DABS(DGAMMA(ISA))/(ATHETA*DTIME*G0A)-      
     +        ((1.D0-ATHETA)/ATHETA)*(DABS(TAT(ISA))/TAUCRT(ISA))
     +        **(1.D0/AMM))**(AMM-1.D0)
          AUX2(ISA,ISB)=DSIGN(1.D0,TAT(ISB))*DSIGN(1.D0,TA(ISA))*     
     +    ((HABT(ISA,ISB)))*
     +    (DABS(DGAMMA(ISA))/(ATHETA*DTIME*G0A)-      
     +        ((1.D0-ATHETA)/ATHETA)*(DABS(TAT(ISA))/TAUCRT(ISA))
     +        **(1.D0/AMM))**AMM    
          ANAB(ISA,ISB)= -FAMB(ISA,ISB)- AUX1(ISA,ISB)- AUX2(ISA,ISB)
        END DO 
      END DO 
C         
C*** FIND INVERSE OF ANAB
C
      CALL KINV(ANAB,AMAB,NSP,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
C 
C      
      DO ISA=1,NSP
        BETA(ISA)=-( TA(ISA) -DSIGN(1.D0,TA(ISA))*      
     +  TAUCR(ISA)*(DABS(DGAMMA(ISA))/(ATHETA*DTIME*G0A)-      
     +        ((1.D0-ATHETA)/ATHETA)*(DABS(TAT(ISA))/TAUCRT(ISA))
     +        **(1.D0/AMM))**AMM)      
      END DO    
C
C*** AMAB AND ba ARE NOW KNOWN AND Dgamma(ISA)_improvement IS CALCULATED ANALUTICALLY BY 
C    MULTIPLYING AMAB AND BETA(ISB)  
       DGAMMAIMPROVE=0.D0 !
       DO ISA=1,NSP
         DO ISB=1,NSP
           DGAMMAIMPROVE(ISA)=DGAMMAIMPROVE(ISA)+AMAB(ISA,ISB)*BETA(ISB) 
         END DO
       END DO   
C
      DO ISA=1,NSP
        DGAMMA(ISA)=DGAMMA(ISA)+DGAMMAIMPROVE(ISA)
      END DO
C       
C
      END      
C
C***********************************************************************
C
      SUBROUTINE KDET3X3(A,DET)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3)
C
      DET =  A(1,1)*( A(2,2)*A(3,3)-A(3,2)*A(2,3) )
     +     - A(1,2)*( A(2,1)*A(3,3)-A(3,1)*A(2,3) )
     +     + A(1,3)*( A(2,1)*A(3,2)-A(3,1)*A(2,2) )
C
      END
C
C***********************************************************************
C
      SUBROUTINE KCOPY(A,B,N)				! Copy A to B
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(N),B(N)
C
      DO I=1,N
        B(I)=A(I)
      ENDDO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KMULT(A,B,C,L,M,N)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(L,M),B(M,N),C(L,N) 
C
      DO I=1,L
      DO J=1,N
        C(I,J)=0.D0
        DO K=1,M
          C(I,J)=C(I,J)+A(I,K)*B(K,J)
        END DO
      END DO
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KMULT4X4(A,B,C)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3,3,3),B(3,3,3,3),C(3,3,3,3)
C
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        AUX=0.D0
        DO M=1,3
        DO N=1,3
          AUX=AUX+A(I,J,M,N)*B(M,N,K,L)
        END DO
        END DO
        C(I,J,K,L)=AUX
      END DO
      END DO
      END DO
      END DO
C
	END
C
C***********************************************************************
C
      SUBROUTINE KMULT4X2(A,B,C)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3,3,3),B(3,3),C(3,3)
C
      DO I=1,3
      DO J=1,3
        AUX=0.D0
        DO K=1,3
        DO L=1,3
          AUX=AUX+A(I,J,K,L)*B(K,L)
        END DO
        END DO
        C(I,J)=AUX
      END DO
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KMULT2X4(A,B,C)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3),B(3,3,3,3),C(3,3)
C
      DO I=1,3
      DO J=1,3
        AUX=0.D0
        DO K=1,3
        DO L=1,3
          AUX=AUX+A(K,L)*B(K,L,I,J)
        END DO
        END DO
        C(I,J)=AUX
      END DO
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KMULT2X2(A,B,C)
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3),B(3,3)
C
      C=0.D0
      DO I=1,3
      DO J=1,3
        C=C+A(I,J)*B(I,J)
      END DO
      END DO
C
      END
C
C*********************************************************************
C
      SUBROUTINE KCOPY12(A,B,NTENS) ! CONVERT 1-D ARRAY TO A 3X3 MATRIX
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(NTENS),B(3,3)
C
      B = 0.D0 ! B(I,J)
      DO I=1,3
      DO J=1,3
C
        IF (I.EQ.J) THEN
          I1=I
        ELSE
          I1=I+J+1
        END IF
C
        IF (I1.LE.NTENS) B(I,J)=A(I1)
C
      END DO
      END DO
C
      END
C
C**********************************************************************
C
      SUBROUTINE KCOPY21(A,B,NTENS) ! CONVERT 3x3 MATRIX TO A 1-D VECTOR
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3),B(NTENS)
C
      B = 0.D0 ! B(I)
C
      DO I=1,3
      DO J=1,3
C
        IF (I.EQ.J) THEN
          I1=I
        ELSE
          I1=I+J+1
        END IF
C
        IF (I1.LE.NTENS) B(I1)=A(I,J)
C
      END DO
      END DO
C
      END
C
C**********************************************************************
C
      SUBROUTINE KCOPY42(A,B,NTENS) ! CONVERT Aijkl to Bij
C
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION A(3,3,3,3),B(NTENS,NTENS)
C
      B = 0.D0 ! B(I,J)
      DO I=1,3
      DO J=1,3
      DO K=1,3
      DO L=1,3
        IF (I.EQ.J) THEN
          I1=I
        ELSE
          I1=I+J+1
        END IF
C
        IF (K.EQ.L) THEN
          J1=K
        ELSE
          J1=K+L+1
        END IF
C
        IF (I1.LE.NTENS.AND.J1.LE.NTENS) B(I1,J1)=A(I,J,K,L)
      END DO
      END DO
      END DO
      END DO
C
      END
C
C**********************************************************************
C
      SUBROUTINE KBCC(A1,A2,A3,SD0,SN0,SDH,SNH,NSP)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION SD0(3,NSP),SN0(3,NSP),SDH(3,NSP),SNH(3,NSP)
      DIMENSION A1(3),A2(3),A3(3)
C
C***  SD0 ==> UNIT VECTOR ALONG DIRECTION OF SLIP
C***  SN0 ==> UNIT NORMAL TO SLIP PLANE
C***  A SLIP SYSTEM IS DEFINED BY THE VECTORS 'SN0' AND 'SD0'
C
C
C*** DEFINE SNH, SDH FOR BCC CRYSTALS
C
      DO ISP=1,2
        SNH(1,ISP)= 0.D0
        SNH(2,ISP)= 1.D0
        SNH(3,ISP)= 1.D0
      END DO
C
      DO ISP=3,4
        SNH(1,ISP)= 0.D0
        SNH(2,ISP)=-1.D0
        SNH(3,ISP)= 1.D0
      END DO
C
      DO ISP=5,6
        SNH(1,ISP)= 1.D0
        SNH(2,ISP)= 0.D0
        SNH(3,ISP)= 1.D0
      END DO
C
      DO ISP=7,8
        SNH(1,ISP)=-1.D0
        SNH(2,ISP)= 0.D0
        SNH(3,ISP)= 1.D0
      END DO
C
      DO ISP=9,10
        SNH(1,ISP)= 1.D0
        SNH(2,ISP)= 1.D0
        SNH(3,ISP)= 0.D0
      END DO   
C
      DO ISP=11,12
        SNH(1,ISP)=-1.D0
        SNH(2,ISP)= 1.D0
        SNH(3,ISP)= 0.D0
      END DO   
C
        SNH(1,13)= 2.D0
        SNH(2,13)= 1.D0
        SNH(3,13)= 1.D0  
C
        SNH(1,14)=-2.D0
        SNH(2,14)= 1.D0
        SNH(3,14)= 1.D0  
C
        SNH(1,15)= 2.D0
        SNH(2,15)=-1.D0
        SNH(3,15)= 1.D0  
C
        SNH(1,16)= 2.D0
        SNH(2,16)= 1.D0
        SNH(3,16)=-1.D0  
C
        SNH(1,17)= 1.D0
        SNH(2,17)= 2.D0
        SNH(3,17)= 1.D0  
C
        SNH(1,18)=-1.D0
        SNH(2,18)= 2.D0
        SNH(3,18)= 1.D0  
C
        SNH(1,19)= 1.D0
        SNH(2,19)=-2.D0
        SNH(3,19)= 1.D0  
C
        SNH(1,20)= 1.D0
        SNH(2,20)= 2.D0
        SNH(3,20)=-1.D0  
C
        SNH(1,21)= 1.D0
        SNH(2,21)= 1.D0
        SNH(3,21)= 2.D0  
C
        SNH(1,22)=-1.D0
        SNH(2,22)= 1.D0
        SNH(3,22)= 2.D0  
C
        SNH(1,23)= 1.D0
        SNH(2,23)=-1.D0
        SNH(3,23)= 2.D0  
C
        SNH(1,24)= 1.D0
        SNH(2,24)= 1.D0
        SNH(3,24)=-2.D0  
C
      SDH(1,1)= 1.D0
      SDH(2,1)=-1.D0
      SDH(3,1)= 1.D0
C
      SDH(1,2)=-1.D0
      SDH(2,2)=-1.D0
      SDH(3,2)= 1.D0
C
      SDH(1,3)= 1.D0
      SDH(2,3)= 1.D0
      SDH(3,3)= 1.D0
C
      SDH(1,4)=-1.D0
      SDH(2,4)= 1.D0
      SDH(3,4)= 1.D0
C
      SDH(1,5)=-1.D0
      SDH(2,5)= 1.D0
      SDH(3,5)= 1.D0
C
      SDH(1,6)=-1.D0
      SDH(2,6)=-1.D0
      SDH(3,6)= 1.D0
C
      SDH(1,7)= 1.D0
      SDH(2,7)= 1.D0
      SDH(3,7)= 1.D0
C
      SDH(1,8)= 1.D0
      SDH(2,8)=-1.D0
      SDH(3,8)= 1.D0
C
      SDH(1,9)=-1.D0
      SDH(2,9)= 1.D0
      SDH(3,9)= 1.D0
C
      SDH(1,10)=-1.D0
      SDH(2,10)= 1.D0
      SDH(3,10)=-1.D0
C
      SDH(1,11)= 1.D0
      SDH(2,11)= 1.D0
      SDH(3,11)= 1.D0
C
      SDH(1,12)= 1.D0
      SDH(2,12)= 1.D0
      SDH(3,12)=-1.D0
C
      SDH(1,13)=-1.D0
      SDH(2,13)= 1.D0
      SDH(3,13)= 1.D0
C
      SDH(1,14)= 1.D0
      SDH(2,14)= 1.D0
      SDH(3,14)= 1.D0
C
      SDH(1,15)= 1.D0
      SDH(2,15)= 1.D0
      SDH(3,15)=-1.D0
C
      SDH(1,16)= 1.D0
      SDH(2,16)=-1.D0
      SDH(3,16)= 1.D0
C
      SDH(1,17)= 1.D0
      SDH(2,17)=-1.D0
      SDH(3,17)= 1.D0
C
      SDH(1,18)= 1.D0
      SDH(2,18)= 1.D0
      SDH(3,18)=-1.D0
C
      SDH(1,19)= 1.D0
      SDH(2,19)= 1.D0
      SDH(3,19)= 1.D0
C
      SDH(1,20)=-1.D0
      SDH(2,20)= 1.D0
      SDH(3,20)= 1.D0
C
      SDH(1,21)= 1.D0
      SDH(2,21)= 1.D0
      SDH(3,21)=-1.D0
C
      SDH(1,22)= 1.D0
      SDH(2,22)=-1.D0
      SDH(3,22)= 1.D0
C
      SDH(1,23)=-1.D0
      SDH(2,23)= 1.D0
      SDH(3,23)= 1.D0
C
      SDH(1,24)= 1.D0
      SDH(2,24)= 1.D0
      SDH(3,24)= 1.D0
C
      DO ISP=1,NSP
      DO I=1,3
        SD0(I,ISP)=SDH(1,ISP)*A1(I)+SDH(2,ISP)*A2(I)+SDH(3,ISP)*A3(I)
        SN0(I,ISP)=SNH(1,ISP)*A1(I)+SNH(2,ISP)*A2(I)+SNH(3,ISP)*A3(I)
      END DO
      END DO
C
      DO ISP=1,NSP
        AMAG=DSQRT(SD0(1,ISP)*SD0(1,ISP)+SD0(2,ISP)*SD0(2,ISP)+
     +             SD0(3,ISP)*SD0(3,ISP))
        BMAG=DSQRT(SN0(1,ISP)*SN0(1,ISP)+SN0(2,ISP)*SN0(2,ISP)+
     +             SN0(3,ISP)*SN0(3,ISP))
        DO I=1,3
          SD0(I,ISP)=SD0(I,ISP)/AMAG
          SN0(I,ISP)=SN0(I,ISP)/BMAG
        END DO
      END DO
C
      END
C
C**********************************************************************
C
      SUBROUTINE KGETFAB(FAB,NSP)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION FAB(NSP,NSP)
C
      A1=8.D0/10.D0 !N no junction
      A2=8.D0/10.D0 !C coplanar junction
      A3=15.D0/10.D0 !G glissile
      A4=17.D0/10.D0 ! W weak sessile
      A5=20.D0/10.D0 ! S strong sessile
C
      DO ISP=1,NSP
        FAB(ISP,ISP)=0.D0
      END DO
C
      FAB(2,1)=A2
C
      FAB(3,1)=A5
      FAB(3,2)=A5
C
      FAB(4,1)=A5
      FAB(4,2)=A5
      FAB(4,3)=A2
C
      FAB(5,1)=A4
      FAB(5,2)=A3
      FAB(5,3)=A3
      FAB(5,4)=A1
C
      FAB(6,1)=A3
      FAB(6,2)=A1
      FAB(6,3)=A4
      FAB(6,4)=A3
      FAB(6,5)=A2
C
      FAB(7,1)=A3
      FAB(7,2)=A4
      FAB(7,3)=A1
      FAB(7,4)=A3
      FAB(7,5)=A5
      FAB(7,6)=A5
C
      FAB(8,1)=A1
      FAB(8,2)=A3
      FAB(8,3)=A3
      FAB(8,4)=A4
      FAB(8,5)=A5
      FAB(8,6)=A5
      FAB(8,7)=A2
C
      FAB(9,1)=A3
      FAB(9,2)=A4
      FAB(9,3)=A3
      FAB(9,4)=A1
      FAB(9,5)=A1
      FAB(9,6)=A3
      FAB(9,7)=A4
      FAB(9,8)=A3
C
      FAB(10,1)=A1
      FAB(10,2)=A3
      FAB(10,3)=A4
      FAB(10,4)=A3
      FAB(10,5)=A3
      FAB(10,6)=A4
      FAB(10,7)=A3
      FAB(10,8)=A1
      FAB(10,9)=A2
C
      FAB(11,1)=A4
      FAB(11,2)=A3
      FAB(11,3)=A1
      FAB(11,4)=A3
      FAB(11,5)=A4
      FAB(11,6)=A3
      FAB(11,7)=A1
      FAB(11,8)=A3
      FAB(11,9)=A5
      FAB(11,10)=A5
C
      FAB(12,1)=A3
      FAB(12,2)=A1
      FAB(12,3)=A3
      FAB(12,4)=A4
      FAB(12,5)=A3
      FAB(12,6)=A1
      FAB(12,7)=A3
      FAB(12,8)=A4
      FAB(12,9)=A5
      FAB(12,10)=A5
      FAB(12,11)=A2
C
      FAB(13,1)=A5
      FAB(13,2)=A5
      FAB(13,3)=A3
      FAB(13,4)=A1
      FAB(13,5)=A1
      FAB(13,6)=A3
      FAB(13,7)=A5
      FAB(13,8)=A5
      FAB(13,9)=A1
      FAB(13,10)=A3
      FAB(13,11)=A5
      FAB(13,12)=A5
C
      FAB(14,1)=A5
      FAB(14,2)=A5
      FAB(14,3)=A1
      FAB(14,4)=A3
      FAB(14,5)=A5
      FAB(14,6)=A5
      FAB(14,7)=A1
      FAB(14,8)=A3
      FAB(14,9)=A5
      FAB(14,10)=A5
      FAB(14,11)=A1
      FAB(14,12)=A3
      FAB(14,13)=A4
C
      FAB(15,1)=A3
      FAB(15,2)=A1
      FAB(15,3)=A5
      FAB(15,4)=A5
      FAB(15,5)=A3
      FAB(15,6)=A1
      FAB(15,7)=A5
      FAB(15,8)=A5
      FAB(15,9)=A5
      FAB(15,10)=A5
      FAB(15,11)=A3
      FAB(15,12)=A1
      FAB(15,13)=A5
      FAB(15,14)=A5
C
      FAB(16,1)=A1
      FAB(16,2)=A3
      FAB(16,3)=A5
      FAB(16,4)=A5
      FAB(16,5)=A5
      FAB(16,6)=A5
      FAB(16,7)=A3
      FAB(16,8)=A1
      FAB(16,9)=A3
      FAB(16,10)=A1
      FAB(16,11)=A5
      FAB(16,12)=A5
      FAB(16,13)=A5
      FAB(16,14)=A5
      FAB(16,15)=A4
C
      FAB(17,1)=A1
      FAB(17,2)=A3
      FAB(17,3)=A5
      FAB(17,4)=A5
      FAB(17,5)=A5
      FAB(17,6)=A5
      FAB(17,7)=A3
      FAB(17,8)=A1
      FAB(17,9)=A3
      FAB(17,10)=A1
      FAB(17,11)=A5
      FAB(17,12)=A5
      FAB(17,13)=A4
      FAB(17,14)=A5
      FAB(17,15)=A5
      FAB(17,16)=A1
C
      FAB(18,1)=A3
      FAB(18,2)=A1
      FAB(18,3)=A5
      FAB(18,4)=A5
      FAB(18,5)=A3
      FAB(18,6)=A1
      FAB(18,7)=A5
      FAB(18,8)=A5
      FAB(18,9)=A5
      FAB(18,10)=A5
      FAB(18,11)=A3
      FAB(18,12)=A1
      FAB(18,13)=A5
      FAB(18,14)=A4
      FAB(18,15)=A1
      FAB(18,16)=A5
      FAB(18,17)=A5
C
      FAB(19,1)=A5
      FAB(19,2)=A5
      FAB(19,3)=A1
      FAB(19,4)=A3
      FAB(19,5)=A5
      FAB(19,6)=A5
      FAB(19,7)=A1
      FAB(19,8)=A3
      FAB(19,9)=A5
      FAB(19,10)=A5
      FAB(19,11)=A1
      FAB(19,12)=A3
      FAB(19,13)=A5
      FAB(19,14)=A1
      FAB(19,15)=A4
      FAB(19,16)=A5
      FAB(19,17)=A4
      FAB(19,18)=A5
C
      FAB(20,1)=A5
      FAB(20,2)=A5
      FAB(20,3)=A3
      FAB(20,4)=A1
      FAB(20,5)=A1
      FAB(20,6)=A3
      FAB(20,7)=A5
      FAB(20,8)=A5
      FAB(20,9)=A1
      FAB(20,10)=A3
      FAB(20,11)=A5
      FAB(20,12)=A5
      FAB(20,13)=A1
      FAB(20,14)=A5
      FAB(20,15)=A5
      FAB(20,16)=A4
      FAB(20,17)=A5
      FAB(20,18)=A4
      FAB(20,19)=A5
C
      FAB(21,1)=A3
      FAB(21,2)=A1
      FAB(21,3)=A5
      FAB(21,4)=A5
      FAB(21,5)=A3
      FAB(21,6)=A1
      FAB(21,7)=A5
      FAB(21,8)=A5
      FAB(21,9)=A5
      FAB(21,10)=A5
      FAB(21,11)=A3
      FAB(21,12)=A1
      FAB(21,13)=A4
      FAB(21,14)=A5
      FAB(21,15)=A1
      FAB(21,16)=A5
      FAB(21,17)=A4
      FAB(21,18)=A1
      FAB(21,19)=A5
      FAB(21,20)=A5
C
      FAB(22,1)=A1
      FAB(22,2)=A3
      FAB(22,3)=A5
      FAB(22,4)=A5
      FAB(22,5)=A5
      FAB(22,6)=A5
      FAB(22,7)=A3
      FAB(22,8)=A1
      FAB(22,9)=A3
      FAB(22,10)=A1
      FAB(22,11)=A5
      FAB(22,12)=A5
      FAB(22,13)=A5
      FAB(22,14)=A4
      FAB(22,15)=A5
      FAB(22,16)=A1
      FAB(22,17)=A1
      FAB(22,18)=A4
      FAB(22,19)=A5
      FAB(22,20)=A5
      FAB(22,21)=A5
C
      FAB(23,1)=A5
      FAB(23,2)=A5
      FAB(23,3)=A3
      FAB(23,4)=A1
      FAB(23,5)=A1
      FAB(23,6)=A3
      FAB(23,7)=A5
      FAB(23,8)=A5
      FAB(23,9)=A1
      FAB(23,10)=A3
      FAB(23,11)=A5
      FAB(23,12)=A5
      FAB(23,13)=A1
      FAB(23,14)=A5
      FAB(23,15)=A4
      FAB(23,16)=A5
      FAB(23,17)=A5
      FAB(23,18)=A5
      FAB(23,19)=A4
      FAB(23,20)=A1
      FAB(23,21)=A5
      FAB(23,22)=A4
C
      FAB(24,1)=A5
      FAB(24,2)=A5
      FAB(24,3)=A1
      FAB(24,4)=A3
      FAB(24,5)=A5
      FAB(24,6)=A5
      FAB(24,7)=A1
      FAB(24,8)=A3
      FAB(24,9)=A5
      FAB(24,10)=A5
      FAB(24,11)=A1
      FAB(24,12)=A3
      FAB(24,13)=A5
      FAB(24,14)=A1
      FAB(24,15)=A5
      FAB(24,16)=A4
      FAB(24,17)=A5
      FAB(24,18)=A5
      FAB(24,19)=A1
      FAB(24,20)=A4
      FAB(24,21)=A4
      FAB(24,22)=A5
      FAB(24,23)=A5

C
      DO I=1,NSP-1
      DO J=I+1,NSP
        FAB(I,J)=FAB(J,I) !SYMMETRY OF FAB
      END DO
      END DO
C
      END
C
C**********************************************************************
C
      SUBROUTINE KGETQAB(QAB,NSP,QAS)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION QAB(NSP,NSP)
C
C**RESULTS TAKEN FROM FCC CRYSTALS
C**QAB=1 IF A AND B ARE COPLANAR AND 1.4 IF NOT
C
C      A1=1.4D0 
C
      DO I=1,NSP
       DO J=1,NSP
        QAB(I,J)=QAS
       END DO
      END DO
C
      DO ISP=1,NSP
        QAB(ISP,ISP)=1.D0
      END DO 
c      
C
      END
C
C**********************************************************************
C
      SUBROUTINE KUNIAXIAL(A1,A2,A3,QLR)
C
C*** DEFINES THE LATTICE UNIT VECTORS n^i 
C    IN THE GLOBAL COORDINATE SYSTEM e_i
C
C    QLR(I,J) IS THE MATRIX OF DIRECTION COSINES FOR THE TRANSFORMATION
C    e_i to n^i
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION A1(3),A2(3),A3(3),QLR(3,3)
C
       A1MAG=DSQRT( A1(1)**2 + A1(2)**2 + A1(3)**2 )
       A2MAG=DSQRT( A2(1)**2 + A2(2)**2 + A2(3)**2 ) 
C
C*** NORMALIZE UNIT CRYSTAL VECTORS
          A1=A1/A1MAG !A1(I)= A1(I)/A1MAG 
C
          A2=A2/A2MAG !A2(I)= A2(I)/A2MAG  
C
       A3(1)= A1(2)*A2(3)-A2(2)*A1(3)
       A3(2)=-(A1(1)*A2(3)-A2(1)*A1(3))  !DEFINE THE LATTICE UNITE VECTOR n^3
       A3(3)= A1(1)*A2(2)-A2(1)*A1(2) 
C
      DO J=1,3
        QLR(1,J)=A1(J)
        QLR(2,J)=A2(J)
        QLR(3,J)=A3(J)
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KINV3X3(A,AINV,NOEL,NPT,KSTEP,KINC,ISING)
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION A(3,3),AINV(3,3)
C
      DET =  A(1,1)*(A(2,2)*A(3,3) - A(3,2)*A(2,3))
     +     - A(1,2)*(A(2,1)*A(3,3) - A(3,1)*A(2,3))
     +     + A(1,3)*(A(2,1)*A(3,2) - A(3,1)*A(2,2))
      ANORM = DSQRT( A(1,1)*A(1,1) + A(1,2)*A(1,2) + A(1,3)*A(1,3)
     +             + A(2,1)*A(2,1) + A(2,2)*A(2,2) + A(2,3)*A(2,3)
     +             + A(3,1)*A(3,1) + A(3,2)*A(3,2) 
     +             + A(3,3)*A(3,3) )/9.D0 
      TOL = ANORM*1.D-10
C 
      IF (DABS(DET) <= TOL) THEN ! Mohsen
        WRITE(*,*) 'TRYING TO INVERT SINGULAR 3X3 MATRIX'
        WRITE(7,*)
        WRITE(7,*) 'SINGULAR MATRIX IN KINV3X3'
        WRITE(*,*) 'PROGRAM STOPS.'
        WRITE(7,*) 'NOEL',NOEL,'NPT',NPT,'KINC',KINC
        CALL XIT
      END IF
C
      AINV(1,1) =  (A(2,2)*A(3,3) - A(2,3)*A(3,2))/DET
      AINV(1,2) = -(A(1,2)*A(3,3) - A(3,2)*A(1,3))/DET
      AINV(1,3) =  (A(1,2)*A(2,3) - A(2,2)*A(1,3))/DET
      AINV(2,1) = -(A(2,1)*A(3,3) - A(3,1)*A(2,3))/DET
      AINV(2,2) =  (A(1,1)*A(3,3) - A(3,1)*A(1,3))/DET
      AINV(2,3) = -(A(1,1)*A(2,3) - A(2,1)*A(1,3))/DET
      AINV(3,1) =  (A(2,1)*A(3,2) - A(3,1)*A(2,2))/DET
      AINV(3,2) = -(A(1,1)*A(3,2) - A(3,1)*A(1,2))/DET
      AINV(3,3) =  (A(1,1)*A(2,2) - A(2,1)*A(1,2))/DET
C      
      END
C
C***********************************************************************
C
      SUBROUTINE KINV(A,AINV,N,NOEL,NPT,KSTEP,KINC,ISING)
C      ! Modified by Mohsen
C
      INCLUDE 'ABA_PARAM.INC'
C
C*** Inverts matrix A (maximum size 100x100)
C
      DIMENSION A(N,N),AINV(N,N)
      DIMENSION Y(N,N)
      DIMENSION INDX(N)
C
      DO I=1,N
      DO J=1,N 
        Y(I,J)=0.D0
      END DO  
      END DO
C      Y = 0.D0 ! Y(I,J)    
      DO I=1,N
        Y(I,I)=1.D0
      ENDDO
      AINV = A ! AINV(I,J) = A(I,J)
      CALL KLUDCMP(AINV,N,INDX,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
      DO J=1,N
        CALL KLUBKSB(AINV,N,INDX,Y(:,J))
      END DO
C
      DO I=1,N
      DO J=1,N
        AINV(I,J)=Y(I,J)
      END DO
      END DO
C
      END
C
C***********************************************************************
C
      SUBROUTINE KLUDCMP(A,N,INDX,NOEL,NPT,KSTEP,KINC,ISING)
C     Replaces an NxN matrix A by its LU decomposition.
C     INDX: Output vector which records the row permutation effected by the partial pivoting.
C	
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION A(N,N),INDX(N)
      DIMENSION VV(N)
C
      TINY = 1.D-20
C
      DO I=1,N
        AAMAX=0.D0
        DO J=1,N
          IF (DABS(A(I,J)).GT.AAMAX) AAMAX=DABS(A(I,J))
        END DO
        IF (AAMAX.EQ.0.) THEN
            WRITE(7,*)
            WRITE(7,*) 'SINGULAR MATRIX IN KLUDCMP'
            WRITE(7,*) 'NOEL',NOEL,'NPT',NPT,'KINC',KINC
            ISING = 1
            RETURN
         END IF   
         VV(I)=1.D0/AAMAX
      END DO
C
      DO J=1,N
C
        DO I=1,J-1
          SUM=A(I,J)
          DO K=1,I-1
            SUM=SUM-A(I,K)*A(K,J)
          END DO
          A(I,J)=SUM
        END DO
C
        AAMAX=0.D0
        DO I=J,N
          SUM=A(I,J)
          DO K=1,J-1
            SUM=SUM-A(I,K)*A(K,J)
          END DO 
          A(I,J)=SUM
          DUM=VV(I)*DABS(SUM)
          IF (DUM.GE.AAMAX) THEN
            IMAX=I
            AAMAX=DUM
          ENDIF
        END DO
C
        IF (J.NE.IMAX) THEN
          DO K=1,N
            DUM=A(IMAX,K)
            A(IMAX,K)=A(J,K)
            A(J,K)=DUM
          END DO 
          VV(IMAX)=VV(J)
        ENDIF
C
        INDX(J)=IMAX
        IF (A(J,J).EQ.0.) A(J,J)=TINY
C
        IF (J.NE.N) THEN
          DUM=1.D0/A(J,J)
          DO I=J+1,N
            A(I,J)=A(I,J)*DUM
          END DO 
        ENDIF
C
	END DO
C 
      END
C
C***********************************************************************
C
      SUBROUTINE KLUBKSB(A,N,INDX,B)
C     Solves the linear system A.x=B.
C     A & INDX are inputs returned by SUBROUTINE KLUDCMP.
C     B is input as the right-hand side vector B, and returns with the solution vector x. 
C      
	INCLUDE 'ABA_PARAM.INC'
C	
      DIMENSION A(N,N),INDX(N),B(N)
      II=0
      DO I=1,N
        LL=INDX(I)
        SUM=B(LL)
        B(LL)=B(I)
        IF (II.NE.0) THEN
          DO J=II,I-1
            SUM=SUM-A(I,J)*B(J)
          END DO
        ELSE IF (SUM.NE.0.) THEN
          II=I
        END IF
        B(I)=SUM
      END DO
C
      DO I=N,1,-1
        SUM=B(I)
        IF (I.LT.N) THEN
          DO J=I+1,N
            SUM=SUM-A(I,J)*B(J)
          END DO
        END IF
        B(I)=SUM/A(I,I)
      END DO
C
      END
C
C****************************************************************
C
      SUBROUTINE KMATRIXEXP(A,EXPA)
C
C*** FINDS THE EXPONENTIAL OF A MATRIX 3x3
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION A(3,3),EXPA(3,3),A2(3,3),A3(3,3)
C
      EXPA = A ! EXPA(I,J) = A(I,J)
      DO I=1,3
        EXPA(I,I)=EXPA(I,I)+1.D0
      END DO
C
      A2 = A ! A2(I,J)=A(I,J)
      TOL=1.D-10
      FAC=1.D0
C
      DO K=2,1000
        N=K+1
        FAC=FAC*K
        CALL KMULT(A2,A,A3,3,3,3)
        DO I=1,3
        DO J=1,3
          EXPA(I,J)=EXPA(I,J)+A3(I,J)/FAC
        END DO
        END DO
        IGO=0
        DO I=1,3
        DO J=1,3
          IF (DABS(A3(I,J)/FAC).GT.TOL) IGO=1
        END DO
        END DO
        IF (IGO.EQ.0) GOTO 100
        A2 = A3 ! A2(I,J) = A3(I,J)
      END DO
 100  CONTINUE
C
 1001 FORMAT(1P8E13.5)
 1002 FORMAT(I5,1P8E13.5)
 1003 FORMAT(10I5)
      END
C
C***********************************************************************
C
      SUBROUTINE KGETDELOG(DELOG,DTDT,F0,DXDX,NOEL,NPT,KSTEP,KINC,ISING)
C  
C*** FIRST FINDS THE LEFT CAUCHY GREEN TENSOR B(3,3)
C    THEN SOLVES THE EIGENPROBLEM FOR B TO FIND THE PRINCIPAL STRETCHES
C    AND THE PRINCIPAL DIRECTIONS OF B. THESE ARE THE COMPONENTS OF V(3,3)
C    FROM POLAR DECOMPOSITION.
C    THE LOGARITHMIC STRAIN IS CALCULATED BY LOG(SQRT(EIGENVALUES OF B))
C    A CHECK IS PERFORMED SO THAT THE PRINCIPAL DIRECTIONS ARE FORM A
C    RIGHT-HANDED SYSTEM
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DELOG(3,3),F0(3,3),DXDX(3,3)
      DIMENSION F0INV(3,3),F(3,3),FT(3,3),
     + B(3,3),BVAL(3),BVEC(3,3),DTDT(3,3),VHLP(6)
C
      CALL KINV3X3(F0,F0INV,NOEL,NPT,KSTEP,KINC,ISING)    
C      IF (ISING.EQ.1) RETURN
      CALL KMULT(DXDX,F0INV,F,3,3,3)
      FT = TRANSPOSE(F)
      CALL KMULT(F,FT,B,3,3,3)
C
      VHLP(1)=B(1,1)
      VHLP(2)=B(2,2)
      VHLP(3)=B(3,3)
      VHLP(4)=B(1,2)
      VHLP(5)=B(1,3)
      VHLP(6)=B(2,3)
      CALL SPRIND(VHLP,BVAL,BVEC,1,3,3)
      DO I=1,3
        BVAL(I)=DLOG(DSQRT(BVAL(I)))
      END DO
      BVEC(3,1)=  BVEC(1,2)*BVEC(2,3)-BVEC(2,2)*BVEC(1,3)
      BVEC(3,2)=-(BVEC(1,1)*BVEC(2,3)-BVEC(2,1)*BVEC(1,3))
      BVEC(3,3)=  BVEC(1,1)*BVEC(2,2)-BVEC(2,1)*BVEC(1,2)
C
      DO I=1,3
      DO J=1,3
        DELOG(I,J)=BVAL(1)*BVEC(1,I)*BVEC(1,J)+
     +             BVAL(2)*BVEC(2,I)*BVEC(2,J)+
     +             BVAL(3)*BVEC(3,I)*BVEC(3,J)
      END DO
      END DO
C
        DTDT(1:3,1:3)=DELOG(1:3,1:3)   
C
      END
C
C***********************************************************************
C
      SUBROUTINE KGETDELOGMISES(DELOGMISES,F0,DXDX,NOEL,
     +   NPT,KSTEP,KINC,ISING)
C  
C*** FIRST FINDS THE LEFT CAUCHY GREEN TENSOR B(3,3)
C    THEN SOLVES THE EIGENPROBLEM FOR B TO FIND THE PRINCIPAL STRETCHES
C    AND THE PRINCIPAL DIRECTIONS OF B. THESE ARE THE COMPONENTS OF V(3,3)
C    FROM POLAR DECOMPOSITION.
C    THE LOGARITHMIC STRAIN IS CALCULATED BY LOG(SQRT(EIGENVALUES OF B))
C    A CHECK IS PERFORMED SO THAT THE PRINCIPAL DIRECTIONS ARE FORM A
C    RIGHT-HANDED SYSTEM
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DELOGMISES(3,3),F0(3,3),DXDX(3,3)
      DIMENSION F0INV(3,3),F(3,3),FT(3,3),
     + B(3,3),BVAL(3),BVEC(3,3),DTDT(3,3),VHLP(6)
C
      CALL KINV3X3(F0,F0INV,NOEL,NPT,KSTEP,KINC,ISING)   
C      IF (ISING.EQ.1) RETURN
      CALL KMULT(DXDX,F0INV,F,3,3,3)
      FT = TRANSPOSE(F)
      CALL KMULT(F,FT,B,3,3,3)
C
      VHLP(1)=B(1,1)
      VHLP(2)=B(2,2)
      VHLP(3)=B(3,3)
      VHLP(4)=B(1,2)
      VHLP(5)=B(1,3)
      VHLP(6)=B(2,3)
      CALL SPRIND(VHLP,BVAL,BVEC,1,3,3)
      DO I=1,3
        BVAL(I)=DLOG(DSQRT(BVAL(I)))
      END DO
      BVEC(3,1)=  BVEC(1,2)*BVEC(2,3)-BVEC(2,2)*BVEC(1,3)
      BVEC(3,2)=-(BVEC(1,1)*BVEC(2,3)-BVEC(2,1)*BVEC(1,3))
      BVEC(3,3)=  BVEC(1,1)*BVEC(2,2)-BVEC(2,1)*BVEC(1,2)
C
      DO I=1,3
      DO J=1,3
        DELOGMISES(I,J)=BVAL(1)*BVEC(1,I)*BVEC(1,J)+
     +                  BVAL(2)*BVEC(2,I)*BVEC(2,J)+
     +                  BVAL(3)*BVEC(3,I)*BVEC(3,J)
      END DO
      END DO
C
C
C
      END
C
C***********************************************************************
C
      SUBROUTINE KTTOVSTRN(T,V,NDI,NSHR,NTENS)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      DIMENSION T(3,3),V(NTENS)
C
      DO I=1,NDI
        V(I) = T(I,I)
      END DO
      DO I=1,NSHR
        IF (I.EQ.1) V(NDI+I) = 2.D0*T(1,2)
        IF (I.EQ.2) V(NDI+I) = 2.D0*T(1,3)
        IF (I.EQ.3) V(NDI+I) = 2.D0*T(2,3)
      END DO
C
      END
C
C***********************************************************************
C 
      SUBROUTINE KGETDL(DGAMMA,NSP,TAU,FE,SD0,SN0,DE,SD,SN,
     + AM,Q,ALET,XI,HAB,UNIT2,GAMMA,T0,TI,H0,HS,CMX,FAMB,AMAB,
     + TA,DTIME,FCN,DFCNTA,DFCNTAUCR,DTDT,     
     + NOEL,NPT,KSTEP,KINC,ISING,ATHETA)
C
C*** FINDS AN ESTIMATE FOR DGAMMA
C
      INCLUDE 'ABA_PARAM.INC'
C
      DIMENSION DGAMMA(NSP),TAU(3,3),FE(3,3),
     + SD0(3,NSP),SN0(3,NSP),DE(3,3),SD(3,NSP),SN(3,NSP),
     + AM(3,3,NSP),Q(3,3),ALET(3,3,3,3),XI(3,3,NSP),HAB(NSP,NSP),
     + ANAB(NSP,NSP),FAMB(NSP,NSP),UNIT2(3,3),UNIT3(NSP,NSP),
     + GAMMA(NSP),CMX(3,3,3,3),TA(NSP)
      DIMENSION DFCNTA(NSP),DFCNTAUCR(NSP),AMAB(NSP,NSP),C(NSP),
     + DTDT(3,3),BETA(NSP),FCN(NSP)         
      DIMENSION FEINV(3,3),AL(3,3),V1(3),V2(3),SCR1(3,3)
C
      CALL KLET(ALET,FE,CMX,TAU,UNIT2)
      CALL KINV3X3(FE,FEINV,NOEL,NPT,KSTEP,KINC,ISING)  
C      IF (ISING.EQ.1) RETURN
      DGAMMA=0.D0 ! DGAMMA(I)=0.D0
C
      DO ISA=1,NSP
C
C
C*** FIND THE CURRENT ORIENTATION OF SLIP AND NORMAL VECTORS
C       SLIP=SD  NORMAL=SN
        CALL KMULT(FE,SD0(:,ISA),SD(:,ISA),3,3,1)
        CALL KMULT(SN0(:,ISA),FEINV,SN(:,ISA),1,3,3)
C
        DO I=1,3
        DO J=1,3
          AL(I,J)=SD(I,ISA)*SN(J,ISA)
        END DO
        END DO
C
C*** SYMMETRIC PART OF Lp COMPONENTS = Dp COMPONENTS
C
        DO I=1,3
        DO J=1,3
          AM(I,J,ISA)=0.5D0*(AL(I,J)+AL(J,I))
        END DO
        END DO
C
        CALL KMULT(SN(:,ISA),TAU,V1,1,3,3)
        CALL KMULT(TAU,SD(:,ISA),V2,3,3,1)
        DO I=1,3
        DO J=1,3
          Q(I,J)=V1(I)*SD(J,ISA)-SN(I,ISA)*V2(J)
        END DO
        END DO
C
        CALL KMULT2X4(AM(:,:,ISA),ALET,SCR1)
        DO I=1,3
        DO J=1,3
          XI(I,J,ISA)=SCR1(I,J)+Q(I,J)
        END DO
        END DO
C
      END DO
C
C*** BUILD ANAB AND BA
C***  DEFINITION OF THE IDENTITY TENSOR
C     
      UNIT3 = 0.D0 ! UNIT3(I,J)=0.D0
      DO I=1,NSP
        UNIT3(I,I)=1.D0		       
      END DO
C   
      DO ISA=1,NSP
        DO ISB=1,NSP  
          CALL KMULT2X2(XI(:,:,ISA),AM(:,:,ISB),AUX)
          FAMB(ISA,ISB)=AUX
             ANAB(ISA,ISB)=UNIT3(ISA,ISB) +
     +       DTIME*ATHETA*(DFCNTA(ISA)*FAMB(ISA,ISB) -                
     +       DFCNTAUCR(ISA)*DSIGN(1.D0,TA(ISB))*(HAB(ISA,ISB)))              
        END DO 
      END DO 
C          
C*** FIND INVERSE OF ANAB
C
      CALL KINV(ANAB,AMAB,NSP,NOEL,NPT,KSTEP,KINC,ISING)
      IF (ISING.EQ.1) RETURN
C
      C = 0.D0 
      DO ISA=1,NSP
        DO I=1,3
        DO J=1,3
          C(ISA)=C(ISA)+XI(I,J,ISA)*DTDT(I,J) 
        END DO
        END DO 
         BETA(ISA)=(FCN(ISA) + ATHETA*(DFCNTA(ISA)*C(ISA)
     +   ))*DTIME 
      END DO
C*** AMAB AND ba ARE NOW KNOWN AND DGAMMA IS CALCULATED BY 
C    MULTIPLYING AMAB AND BETA(ISB)
       DGAMMA=0.D0 !
       DO ISA=1,NSP
         DO ISB=1,NSP
            DGAMMA(ISA)=DGAMMA(ISA)+AMAB(ISA,ISB)*BETA(ISB) 
         END DO
       END DO    
C
      END      
C
C***********************************************************************
C     